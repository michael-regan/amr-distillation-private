[
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "list all boardgames by gmt",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 juegos de mesa fueron hechos por gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "qu\u00e9 juegos de mesa fueron hechos por gmt",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "zeige mir alle brettspiele von gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "zeige mir alle brettspiele von gmt",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0438\u0433\u0440\u044b gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0438\u0433\u0440\u044b gmt",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "listez tous les jeux de soci\u00e9t\u00e9 de gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "listez tous les jeux de soci\u00e9t\u00e9 de gmt",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardykite visus gmt \u017eaidimus\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "i\u0161vardykite visus gmt \u017eaidimus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "who developed skype",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n desarroll\u00f3 skype\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "qui\u00e9n desarroll\u00f3 skype",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer hat skype entwickelt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "wer hat skype entwickelt",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b skype\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b skype",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui a d\u00e9velopp\u00e9 skype \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "qui a d\u00e9velopp\u00e9 skype ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas suk\u016br\u0117 \u201eskype\u201c\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "kas suk\u016br\u0117 \u201eskype\u201c",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "which people were born in heraklion",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 personas nacieron en heraklion\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "qu\u00e9 personas nacieron en heraklion",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche menschen wurden in heraklion geboren\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "welche menschen wurden in heraklion geboren",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043b\u044e\u0434\u0438 \u0440\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u0432 \u0438\u0440\u0430\u043a\u043b\u0438\u043e\u043d\u0435\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043b\u044e\u0434\u0438 \u0440\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u0432 \u0438\u0440\u0430\u043a\u043b\u0438\u043e\u043d\u0435",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est n\u00e9 \u00e0 heraklion \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "qui est n\u00e9 \u00e0 heraklion ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas gim\u0117 heraklione\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "kas gim\u0117 heraklione",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "in which us state is area 51 located",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en cu\u00e1l estado de estados unidos esta situada el area 51\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "en cu\u00e1l estado de estados unidos esta situada el area 51",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welchem us bundesstaat liegt area 51\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "in welchem us bundesstaat liegt area 51",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u043e\u043c \u0448\u0442\u0430\u0442\u0435 \u0441\u0448\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u043e\u043d\u0430 51\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "\u0432 \u043a\u0430\u043a\u043e\u043c \u0448\u0442\u0430\u0442\u0435 \u0441\u0448\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u043e\u043d\u0430 51",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dans quel etat des etatsunis se situe larea 51 \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "dans quel etat des etatsunis se situe larea 51 ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurioje jav valstijoje yra karin\u0117 baz\u0117 51 zona\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "kurioje jav valstijoje yra karin\u0117 baz\u0117 51 zona",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "who is the mayor of new york city",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n es el alcalde de la cuidad de nueva york\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "qui\u00e9n es el alcalde de la cuidad de nueva york",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer ist der b\u00fcrgermeister von new york city\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "wer ist der b\u00fcrgermeister von new york city",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u043c\u0435\u0440 \u043d\u044c\u044e \u0439\u043e\u0440\u043a\u0430\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "\u043a\u0442\u043e \u043c\u0435\u0440 \u043d\u044c\u044e \u0439\u043e\u0440\u043a\u0430",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le maire de la cit\u00e9 de new york \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "qui est le maire de la cit\u00e9 de new york ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas yra niujorko meras\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "kas yra niujorko meras",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which countries have places with more than two caves\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "which countries have places with more than two caves",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 pa\u00edses tienen lugares con m\u00e1s de dos cuevas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "qu\u00e9 pa\u00edses tienen lugares con m\u00e1s de dos cuevas",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welche l\u00e4ndern gibt es mehr als 2 h\u00f6hlen\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "in welche l\u00e4ndern gibt es mehr als 2 h\u00f6hlen",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0435\u0441\u0442\u044c \u043c\u0435\u0441\u0442\u0430 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0449\u0435\u0440 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u0434\u0432\u0435\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0435\u0441\u0442\u044c \u043c\u0435\u0441\u0442\u0430 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0449\u0435\u0440 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u0434\u0432\u0435",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le maire de la cit\u00e9 de new york \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "qui est le maire de la cit\u00e9 de new york ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kuriose \u0161alyse yra viet\u0173 kuriose yra daugiau nei du urvai\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "kuriose \u0161alyse yra viet\u0173 kuriose yra daugiau nei du urvai",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "where did abraham lincoln die",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "d\u00f3nde muri\u00f3 abraham lincoln\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "d\u00f3nde muri\u00f3 abraham lincoln",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wo ist abraham lincoln gestorben\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "wo ist abraham lincoln gestorben",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u043e\u0433\u0434\u0430 \u0443\u043c\u0435\u0440 \u0430\u0431\u0440\u0430\u0445\u0430\u043c \u043b\u0438\u043d\u043a\u043e\u043b\u044c\u043d\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "\u043a\u043e\u0433\u0434\u0430 \u0443\u043c\u0435\u0440 \u0430\u0431\u0440\u0430\u0445\u0430\u043c \u043b\u0438\u043d\u043a\u043e\u043b\u044c\u043d",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "o\u00f9 est d\u00e9c\u00e9d\u00e9 abraham lincoln \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "o\u00f9 est d\u00e9c\u00e9d\u00e9 abraham lincoln ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kur mire abraomas linkolnas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "kur mire abraomas linkolnas",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "which airports does air china serve",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en qu\u00e9 aeropuertos opera air china\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "en qu\u00e9 aeropuertos opera air china",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche flugh\u00e4fen bedient air china\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "welche flugh\u00e4fen bedient air china",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 air china\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 air china",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels a\u00e9roports sont desservis par air china \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "quels a\u00e9roports sont desservis par air china ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "oro uostai kuriuos aptarnauja \u201eair china\u201c\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "oro uostai kuriuos aptarnauja \u201eair china\u201c",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "give me all actors starring in movies directed by and starring william shatner",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 actores protagonizan pel\u00edculas dirigidas y protagonizadas por william shatner\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "qu\u00e9 actores protagonizan pel\u00edculas dirigidas y protagonizadas por william shatner",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "gib mir alle schauspieler die in filmen gespielt haben in dem william shatner gespielt und gleichyeitig regie gef\u00fchrt hat\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "gib mir alle schauspieler die in filmen gespielt haben in dem william shatner gespielt und gleichyeitig regie gef\u00fchrt hat",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u043a\u0442\u0435\u0440\u043e\u0432 \u0441\u043d\u0438\u043c\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0440\u043e\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0443\u0438\u043b\u044c\u044f\u043c\u043e\u043c \u0448\u0435\u0442\u043d\u0435\u0440\u043e\u043c\u0432 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043c \u0441\u0430\u043c\u0438\u043c\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u043a\u0442\u0435\u0440\u043e\u0432 \u0441\u043d\u0438\u043c\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0440\u043e\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0443\u0438\u043b\u044c\u044f\u043c\u043e\u043c \u0448\u0435\u0442\u043d\u0435\u0440\u043e\u043c\u0432 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043c \u0441\u0430\u043c\u0438\u043c",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi tous les acteurs qui figurent dans les films r\u00e9alis\u00e9s par william shatner\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "donnezmoi tous les acteurs qui figurent dans les films r\u00e9alis\u00e9s par william shatner",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokie aktoriai vaidino filmuose kuriuose re\u017eisierius ir aktorius buvo williamas shatneris\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "kokie aktoriai vaidino filmuose kuriuose re\u017eisierius ir aktorius buvo williamas shatneris",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "what are the official languages of the philippines",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "cu\u00e1les son los idiomas oficiales de filipinas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "cu\u00e1les son los idiomas oficiales de filipinas",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "was ist die amtssprache auf den philippinen\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "was ist die amtssprache auf den philippinen",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438 \u043d\u0430 \u0444\u0438\u043b\u043b\u0438\u043f\u0438\u043d\u0430\u0445\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438 \u043d\u0430 \u0444\u0438\u043b\u043b\u0438\u043f\u0438\u043d\u0430\u0445",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels sont les langues officielles des philippines \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "quels sont les langues officielles des philippines ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokios yra oficialios filipin\u0173 kalbos\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "kokios yra oficialios filipin\u0173 kalbos",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "give me all danish films",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame todas las pel\u00edculas danesas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "dame todas las pel\u00edculas danesas",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste als d\u00e4nischen filme auf\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "liste als d\u00e4nischen filme auf",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0434\u0430\u0442\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u043c\u044b\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0434\u0430\u0442\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u043c\u044b",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi tous les films danois\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "donnezmoi tous les films danois",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u012fvardykite visus dan\u0173 filmus\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "\u012fvardykite visus dan\u0173 filmus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "which movies starring brad pitt were directed by guy ritchie",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 pel\u00edculas protagonizadas por brad pitt han sido dirigidas por guy ritchie\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "qu\u00e9 pel\u00edculas protagonizadas por brad pitt han sido dirigidas por guy ritchie",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste brad pitt filme auf in denen guy ritchie regie gef\u00fchrt hat\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "liste brad pitt filme auf in denen guy ritchie regie gef\u00fchrt hat",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0433\u0430\u0435\u043c \u0440\u0438\u0447\u0438\u0438 \u0441\u043d\u0438\u043c\u0430\u043b\u0441\u044f \u0431\u0440\u044d\u0434 \u043f\u0438\u0442\u0442\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0433\u0430\u0435\u043c \u0440\u0438\u0447\u0438\u0438 \u0441\u043d\u0438\u043c\u0430\u043b\u0441\u044f \u0431\u0440\u044d\u0434 \u043f\u0438\u0442\u0442",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels films avec brad pitt sont r\u00e9alis\u00e9s par guy ritchie \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "quels films avec brad pitt sont r\u00e9alis\u00e9s par guy ritchie ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokius filmus su bradu pittu re\u017eisavo guy ritchie\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "kokius filmus su bradu pittu re\u017eisavo guy ritchie",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "give me the grandchildren of bruce lee",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9nes son los nietos de bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "qui\u00e9nes son los nietos de bruce lee",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "zeige die enkelkinder von bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "zeige die enkelkinder von bruce lee",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u043d\u0443\u043a\u043e\u0432 \u0431\u0440\u044e\u0441\u0430 \u043b\u0438\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u043d\u0443\u043a\u043e\u0432 \u0431\u0440\u044e\u0441\u0430 \u043b\u0438",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnemoi les petitsenfants de bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "donnemoi les petitsenfants de bruce lee",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "duok man bruceo lee an\u016bkus\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "duok man bruceo lee an\u016bkus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "which other weapons did the designer of the uzi develop",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 otras armas desarroll\u00f3 el dise\u00f1ador de la uzi\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "qu\u00e9 otras armas desarroll\u00f3 el dise\u00f1ador de la uzi",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche anderen waffen wurden vom designer der uzi entwickelt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "welche anderen waffen wurden vom designer der uzi entwickelt",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0438\u043d\u044b\u0435 \u043e\u0440\u0443\u0436\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0435\u043b \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c \u0443\u0437\u0438\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0438\u043d\u044b\u0435 \u043e\u0440\u0443\u0436\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0435\u043b \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c \u0443\u0437\u0438",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quelles autres armes ont \u00e9t\u00e9 d\u00e9velopp\u00e9es par le cr\u00e9ateur du uzi \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "quelles autres armes ont \u00e9t\u00e9 d\u00e9velopp\u00e9es par le cr\u00e9ateur du uzi ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokius kitus ginklus suk\u016br\u0117 uzi konstruktorius\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "kokius kitus ginklus suk\u016br\u0117 uzi konstruktorius",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "who is the owner of universal studios",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n es el due\u00f1o de universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "qui\u00e9n es el due\u00f1o de universal studios",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wem geh\u00f6ren die universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "wem geh\u00f6ren die universal studios",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c universal studios",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le propri\u00e9taire de universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "qui est le propri\u00e9taire de universal studios",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas yra \u201euniversal studios\u201c savininkas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "kas yra \u201euniversal studios\u201c savininkas",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which state of the usa has the highest population density\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "which state of the usa has the highest population density",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "cu\u00e1l estado de estados unidos tiene la mayor densidad poblacional\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "cu\u00e1l estado de estados unidos tiene la mayor densidad poblacional",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welcher staat in den usa hat die h\u00f6chste bev\u00f6lkerungsdichte\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "welcher staat in den usa hat die h\u00f6chste bev\u00f6lkerungsdichte",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u0448\u0442\u0430\u0442\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u0441\u0430\u043c\u0443\u044e \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0448\u0430\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "\u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u0448\u0442\u0430\u0442\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u0441\u0430\u043c\u0443\u044e \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0448\u0430",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quel \u00e9tat des \u00e9tats unis a la densit\u00e9 de population la plus \u00e9lev\u00e9e\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "quel \u00e9tat des \u00e9tats unis a la densit\u00e9 de population la plus \u00e9lev\u00e9e",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurioje jav valstijoje gyventoj\u0173 tankumas did\u017eiausias\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "kurioje jav valstijoje gyventoj\u0173 tankumas did\u017eiausias",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which monarchs were married to a german\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "which monarchs were married to a german",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 monarcas estaban casados con una persona alemana\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "qu\u00e9 monarcas estaban casados con una persona alemana",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche monarchen waren mit deutschen verheiratet\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "welche monarchen waren mit deutschen verheiratet",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0438\u0437 \u043c\u043e\u043d\u0430\u0440\u0445\u043e\u0432 \u0431\u044b\u043b \u0436\u0435\u043d\u0430\u0442 \u043d\u0430 \u043d\u0435\u043c\u043a\u0435\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "\u043a\u0442\u043e \u0438\u0437 \u043c\u043e\u043d\u0430\u0440\u0445\u043e\u0432 \u0431\u044b\u043b \u0436\u0435\u043d\u0430\u0442 \u043d\u0430 \u043d\u0435\u043c\u043a\u0435",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels monarques ont \u00e9t\u00e9 mari\u00e9s \u00e0 des allemands \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "quels monarques ont \u00e9t\u00e9 mari\u00e9s \u00e0 des allemands ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurie monarchai buvo ved\u0119 vokietes\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "kurie monarchai buvo ved\u0119 vokietes",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which organizations were founded in 1950\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "which organizations were founded in 1950",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 organizaciones fueron establecidas en 1950\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "qu\u00e9 organizaciones fueron establecidas en 1950",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche organisationen wurden 1950 gegr\u00fcndet\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "welche organisationen wurden 1950 gegr\u00fcndet",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u044b\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b \u0432 1950 \u0433\u043e\u0434\u0443\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u044b\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b \u0432 1950 \u0433\u043e\u0434\u0443",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quelles organisations ont \u00e9t\u00e9 fond\u00e9es en 1950 \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "quelles organisations ont \u00e9t\u00e9 fond\u00e9es en 1950 ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokios organizacijos buvo \u012fkurtos 1930 m\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "kokios organizacijos buvo \u012fkurtos 1930 m",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "who created the comic captain america",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n cre\u00f3 el comic capit\u00e1n am\u00e9rica\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "qui\u00e9n cre\u00f3 el comic capit\u00e1n am\u00e9rica",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer ist der sch\u00f6pfer von captain america\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "wer ist der sch\u00f6pfer von captain america",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u0440\u043e\u043c \u043a\u043e\u043c\u0438\u043a\u0441\u0430 \u043a\u0430\u043f\u0438\u0442\u0430\u043d \u0430\u043c\u0435\u0440\u0438\u043a\u0430\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u0440\u043e\u043c \u043a\u043e\u043c\u0438\u043a\u0441\u0430 \u043a\u0430\u043f\u0438\u0442\u0430\u043d \u0430\u043c\u0435\u0440\u0438\u043a\u0430",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui a cr\u00e9\u00e9 le comic captain america\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "qui a cr\u00e9\u00e9 le comic captain america",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas suk\u016br\u0117 kapitono amerikos komiks\u0105\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "kas suk\u016br\u0117 kapitono amerikos komiks\u0105",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the apollo 14 astronauts\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "give me the apollo 14 astronauts",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 astronautas participaron en la misi\u00f3n apolo 14\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "qu\u00e9 astronautas participaron en la misi\u00f3n apolo 14",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer war an bord der apollo 14\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "wer war an bord der apollo 14",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u044d\u043a\u0438\u043f\u0430\u0436 \u0430\u043f\u043e\u043b\u043b\u043e 14\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u044d\u043a\u0438\u043f\u0430\u0436 \u0430\u043f\u043e\u043b\u043b\u043e 14",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnemoi tous les astronautes dapollo 14\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "donnemoi tous les astronautes dapollo 14",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "pasakyk man apollo 14 astronaut\u0173 vardus\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "pasakyk man apollo 14 astronaut\u0173 vardus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "who wrote the book the pillars of the earth",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n escribi\u00f3 el libro los pilares de la tierra\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "qui\u00e9n escribi\u00f3 el libro los pilares de la tierra",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer hat das buch die s\u00e4ulen der welt geschrieben\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "wer hat das buch die s\u00e4ulen der welt geschrieben",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0430\u0432\u0442\u043e\u0440 \u043a\u043d\u0438\u0433\u0438 \u0441\u0442\u043e\u043b\u043f\u044b \u0437\u0435\u043c\u043b\u0438\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "\u043a\u0442\u043e \u0430\u0432\u0442\u043e\u0440 \u043a\u043d\u0438\u0433\u0438 \u0441\u0442\u043e\u043b\u043f\u044b \u0437\u0435\u043c\u043b\u0438",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quelles f\u00eates sont c\u00e9l\u00e9br\u00e9es dans le monde entier\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "quelles f\u00eates sont c\u00e9l\u00e9br\u00e9es dans le monde entier",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "ar neimaras \u017eaid\u0117 u\u017e real madrid \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "ar neimaras \u017eaid\u0117 u\u017e real madrid ",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which state of the united states of america has the highest density\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "which state of the united states of america has the highest density",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 estado de los estados unidos de am\u00e9rica tiene la mayor densidad poblacional\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "qu\u00e9 estado de los estados unidos de am\u00e9rica tiene la mayor densidad poblacional",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welcher usbundesstaat hat die h\u00f6chste bev\u00f6lkerungsdichte\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "welcher usbundesstaat hat die h\u00f6chste bev\u00f6lkerungsdichte",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u043e\u0439 \u0448\u0442\u0430\u0442 \u0441\u0448\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "\u043a\u0430\u043a\u043e\u0439 \u0448\u0442\u0430\u0442 \u0441\u0448\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quel \u00e9tat des usa a la plus grande densit\u00e9 \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "quel \u00e9tat des usa a la plus grande densit\u00e9 ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurioje jungtini\u0173 amerikos valstij\u0173 valstijoje gyventoj\u0173 tankumas did\u017eiausias\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "kurioje jungtini\u0173 amerikos valstij\u0173 valstijoje gyventoj\u0173 tankumas did\u017eiausias",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which spaceflights were launched from baikonur\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "which spaceflights were launched from baikonur",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 misiones espaciales partieron desde baikonur\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "qu\u00e9 misiones espaciales partieron desde baikonur",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche raumfl\u00fcge starteten von baikonur aus\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "welche raumfl\u00fcge starteten von baikonur aus",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043a\u043e\u0441\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\u0438 \u0441 \u0431\u0430\u0439\u043a\u043e\u043d\u0443\u0440\u0430\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043a\u043e\u0441\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\u0438 \u0441 \u0431\u0430\u0439\u043a\u043e\u043d\u0443\u0440\u0430",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels vols spatiaux ont \u00e9t\u00e9 lanc\u00e9s depuis ba\u00efkonour \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "quels vols spatiaux ont \u00e9t\u00e9 lanc\u00e9s depuis ba\u00efkonour ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokie erdv\u0117laiviai buvo paleisti i\u0161 baikon\u016bro\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "kokie erdv\u0117laiviai buvo paleisti i\u0161 baikon\u016bro",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "give me a list of all trumpet players that were bandleaders",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame una lista de todos los trompeteros que fueron l\u00edderes de una banda\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "dame una lista de todos los trompeteros que fueron l\u00edderes de una banda",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle trompetenspieler auf die bandleader einer band waren\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "liste alle trompetenspieler auf die bandleader einer band waren",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0442\u0440\u0443\u0431\u0430\u0447\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043b\u0438\u0434\u0435\u0440\u0430\u043c\u0438 \u0433\u0440\u0443\u043f\u043f\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0442\u0440\u0443\u0431\u0430\u0447\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043b\u0438\u0434\u0435\u0440\u0430\u043c\u0438 \u0433\u0440\u0443\u043f\u043f",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi une liste de tous les joueurs de trempette qui sont chefs de groupe\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "donnezmoi une liste de tous les joueurs de trempette qui sont chefs de groupe",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardykite visus trimitus kurie buvo orkestro dirigentai\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "i\u0161vardykite visus trimitus kurie buvo orkestro dirigentai",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which us states are in the same timezone as utah\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "which us states are in the same timezone as utah",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 estados de eeuu se encuentran en la misma zona horaria que utah\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "qu\u00e9 estados de eeuu se encuentran en la misma zona horaria que utah",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche usstaaten liegen in der gleichen zeitzone wie utah\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "welche usstaaten liegen in der gleichen zeitzone wie utah",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0448\u0442\u0430\u0442\u044b \u0441\u0448\u0430 \u0432 \u0442\u043e\u043c \u0436\u0435 \u0447\u0430\u0441\u043e\u0432\u043e\u043c \u043f\u043e\u044f\u0441\u0435 \u0447\u0442\u043e \u0438 \u044e\u0442\u0430\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0448\u0442\u0430\u0442\u044b \u0441\u0448\u0430 \u0432 \u0442\u043e\u043c \u0436\u0435 \u0447\u0430\u0441\u043e\u0432\u043e\u043c \u043f\u043e\u044f\u0441\u0435 \u0447\u0442\u043e \u0438 \u044e\u0442\u0430",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels \u00e9tats am\u00e9ricains sont dans le m\u00eame fuseau horaire que lutah \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "quels \u00e9tats am\u00e9ricains sont dans le m\u00eame fuseau horaire que lutah ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurios jav valstijos yra toje pa\u010dioje laiko juostoje kaip juta\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "kurios jav valstijos yra toje pa\u010dioje laiko juostoje kaip juta",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which us states possess gold minerals\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "which us states possess gold minerals",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en qu\u00e9 estados de los estados unidos de am\u00e9rica hay oro\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "en qu\u00e9 estados de los estados unidos de am\u00e9rica hay oro",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welchen usstaaten gibt es goldvorkommen\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "in welchen usstaaten gibt es goldvorkommen",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0448\u0442\u0430\u0442\u0430\u0445 \u0441\u0448\u0430 \u0435\u0441\u0442\u044c \u0437\u0430\u043b\u0435\u0436\u0438 \u0437\u043e\u043b\u043e\u0442\u043e\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043c\u0438\u043d\u0435\u0440\u0430\u043b\u043e\u0432\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0448\u0442\u0430\u0442\u0430\u0445 \u0441\u0448\u0430 \u0435\u0441\u0442\u044c \u0437\u0430\u043b\u0435\u0436\u0438 \u0437\u043e\u043b\u043e\u0442\u043e\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043c\u0438\u043d\u0435\u0440\u0430\u043b\u043e\u0432",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels \u00e9tats am\u00e9ricains sont dans le m\u00eame fuseau horaire que lutah \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "quels \u00e9tats am\u00e9ricains sont dans le m\u00eame fuseau horaire que lutah ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurios jav valstijos turi aukso atsargas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "kurios jav valstijos turi aukso atsargas",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the daughter of ingrid bergman married to\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the daughter of ingrid bergman married to",
        "question": "who is the daughter of ingrid bergman married to",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "con qui\u00e9n est\u00e1 casada la hija de ingrid bergman\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the daughter of ingrid bergman married to",
        "question": "con qui\u00e9n est\u00e1 casada la hija de ingrid bergman",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "mit wem ist die tochter von ingrid bergman verheiratet\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the daughter of ingrid bergman married to",
        "question": "mit wem ist die tochter von ingrid bergman verheiratet",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0437\u0430 \u043a\u0435\u043c \u0431\u044b\u043b\u0430 \u0437\u0430\u043c\u0443\u0436\u0435\u043c \u0434\u043e\u0447\u044c \u0438\u043d\u0433\u0440\u0438\u0434 \u0431\u0435\u0440\u0433\u043c\u0430\u043d\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the daughter of ingrid bergman married to",
        "question": "\u0437\u0430 \u043a\u0435\u043c \u0431\u044b\u043b\u0430 \u0437\u0430\u043c\u0443\u0436\u0435\u043c \u0434\u043e\u0447\u044c \u0438\u043d\u0433\u0440\u0438\u0434 \u0431\u0435\u0440\u0433\u043c\u0430\u043d",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "avec qui la fille dingrid bergman estelle mari\u00e9e \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the daughter of ingrid bergman married to",
        "question": "avec qui la fille dingrid bergman estelle mari\u00e9e ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "su kuo i\u0161tek\u0117jusi ingrid bergman dukra\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the daughter of ingrid bergman married to",
        "question": "su kuo i\u0161tek\u0117jusi ingrid bergman dukra",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "how deep is lake placid\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "how deep is lake placid",
        "question": "how deep is lake placid",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 tan profundo es el lago placid\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "how deep is lake placid",
        "question": "qu\u00e9 tan profundo es el lago placid",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wie tief ist der lake placid\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "how deep is lake placid",
        "question": "wie tief ist der lake placid",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u043e\u0432\u0430 \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u043e\u0437\u0435\u0440\u0430 \u043f\u043b\u044d\u0441\u0438\u0434\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "how deep is lake placid",
        "question": "\u043a\u0430\u043a\u043e\u0432\u0430 \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u043e\u0437\u0435\u0440\u0430 \u043f\u043b\u044d\u0441\u0438\u0434",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "avec qui la fille dingrid bergman estelle mari\u00e9e \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "how deep is lake placid",
        "question": "avec qui la fille dingrid bergman estelle mari\u00e9e ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokio gylio yra plasido e\u017eeras\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "how deep is lake placid",
        "question": "kokio gylio yra plasido e\u017eeras",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "show me all museums in london\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all museums in london",
        "question": "show me all museums in london",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "mu\u00e9strame todos los museos en londres\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all museums in london",
        "question": "mu\u00e9strame todos los museos en londres",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle museen in london auf\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all museums in london",
        "question": "liste alle museen in london auf",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u043c\u043d\u0435 \u0432\u0441\u0435 \u043c\u0443\u0437\u0435\u0438 \u043b\u043e\u043d\u0434\u043e\u043d\u0430\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all museums in london",
        "question": "\u043f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u043c\u043d\u0435 \u0432\u0441\u0435 \u043c\u0443\u0437\u0435\u0438 \u043b\u043e\u043d\u0434\u043e\u043d\u0430",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "montrezmoi tous les mus\u00e9es de londres\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all museums in london",
        "question": "montrezmoi tous les mus\u00e9es de londres",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardykite visus londono muziejus\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all museums in london",
        "question": "i\u0161vardykite visus londono muziejus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which caves have more than 3 entrances\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which caves have more than 3 entrances",
        "question": "which caves have more than 3 entrances",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 cuevas tienen m\u00e1s de 3 entradas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which caves have more than 3 entrances",
        "question": "qu\u00e9 cuevas tienen m\u00e1s de 3 entradas",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche h\u00f6hlen haben mehr als drei h\u00f6hleneing\u00e4nge\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which caves have more than 3 entrances",
        "question": "welche h\u00f6hlen haben mehr als drei h\u00f6hleneing\u00e4nge",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u043f\u0435\u0449\u0435\u0440\u0430\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 3 \u0432\u0445\u043e\u0434\u043e\u0432\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which caves have more than 3 entrances",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u043f\u0435\u0449\u0435\u0440\u0430\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 3 \u0432\u0445\u043e\u0434\u043e\u0432",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "montrezmoi tous les mus\u00e9es de londres\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which caves have more than 3 entrances",
        "question": "montrezmoi tous les mus\u00e9es de londres",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kuriuose urvuose yra daugiau nei 3 \u012f\u0117jimai\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which caves have more than 3 entrances",
        "question": "kuriuose urvuose yra daugiau nei 3 \u012f\u0117jimai",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the tallest player of the atlanta falcons\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the tallest player of the atlanta falcons",
        "question": "who is the tallest player of the atlanta falcons",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n es el jugador m\u00e1s alto de los atlanta falcons\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the tallest player of the atlanta falcons",
        "question": "qui\u00e9n es el jugador m\u00e1s alto de los atlanta falcons",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wie hei\u00dft der gr\u00f6\u00dfte spieler der atlanta falcons\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the tallest player of the atlanta falcons",
        "question": "wie hei\u00dft der gr\u00f6\u00dfte spieler der atlanta falcons",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0438\u0433\u0440\u043e\u043a atlanta falcons\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the tallest player of the atlanta falcons",
        "question": "\u043a\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0438\u0433\u0440\u043e\u043a atlanta falcons",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le joueur le plus grand en taille chez les atlanta falcons \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the tallest player of the atlanta falcons",
        "question": "qui est le joueur le plus grand en taille chez les atlanta falcons ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas yra auk\u0161\u010diausias atlantos \u201efalcons\u201c \u017eaid\u0117jas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the tallest player of the atlanta falcons",
        "question": "kas yra auk\u0161\u010diausias atlantos \u201efalcons\u201c \u017eaid\u0117jas",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the top10 action roleplaying video games according to ign\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the top10 action roleplaying video games according to ign",
        "question": "what are the top10 action roleplaying video games according to ign",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "cu\u00e1les son los 10 mejores videojuegos de rol de acci\u00f3n seg\u00fan ign\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the top10 action roleplaying video games according to ign",
        "question": "cu\u00e1les son los 10 mejores videojuegos de rol de acci\u00f3n seg\u00fan ign",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welches sind laut ign die 10 besten aktionrollenspiele f\u00fcr den pc\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the top10 action roleplaying video games according to ign",
        "question": "welches sind laut ign die 10 besten aktionrollenspiele f\u00fcr den pc",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0440\u043e\u043b\u0435\u0432\u044b\u0435 \u0438\u0433\u0440\u044b \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 \u0442\u043e\u043f10 \u043f\u043e \u0432\u0435\u0440\u0441\u0438\u0438 ign\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the top10 action roleplaying video games according to ign",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0440\u043e\u043b\u0435\u0432\u044b\u0435 \u0438\u0433\u0440\u044b \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 \u0442\u043e\u043f10 \u043f\u043e \u0432\u0435\u0440\u0441\u0438\u0438 ign",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le joueur le plus grand en taille chez les atlanta falcons \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the top10 action roleplaying video games according to ign",
        "question": "qui est le joueur le plus grand en taille chez les atlanta falcons ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurie \u017eaidimai patenka \u012f 10 geriausi\u0173 veiksmo rpg pagal ign\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the top10 action roleplaying video games according to ign",
        "question": "kurie \u017eaidimai patenka \u012f 10 geriausi\u0173 veiksmo rpg pagal ign",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all writers that won the nobel prize in literature\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all writers that won the nobel prize in literature",
        "question": "give me all writers that won the nobel prize in literature",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 escritores ganaron el premio nobel de literatura\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all writers that won the nobel prize in literature",
        "question": "qu\u00e9 escritores ganaron el premio nobel de literatura",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle schriftsteller auf die den nobelpreis gewonnen haben\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all writers that won the nobel prize in literature",
        "question": "liste alle schriftsteller auf die den nobelpreis gewonnen haben",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u043f\u0438\u0441\u0430\u0442\u0435\u043b\u0435\u0439 \u0432\u044b\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445 \u043d\u043e\u0431\u0435\u043b\u0435\u0432\u0441\u043a\u0443\u044e \u043f\u0440\u0435\u043c\u0438\u044e \u043f\u043e \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0435\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all writers that won the nobel prize in literature",
        "question": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u043f\u0438\u0441\u0430\u0442\u0435\u043b\u0435\u0439 \u0432\u044b\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445 \u043d\u043e\u0431\u0435\u043b\u0435\u0432\u0441\u043a\u0443\u044e \u043f\u0440\u0435\u043c\u0438\u044e \u043f\u043e \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0435",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels sont tous les \u00e9crivains prix nobel de litt\u00e9rature \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all writers that won the nobel prize in literature",
        "question": "quels sont tous les \u00e9crivains prix nobel de litt\u00e9rature ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardink visus ra\u0161ytojus laim\u0117jusius nobelio literat\u016bros premij\u0105\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all writers that won the nobel prize in literature",
        "question": "i\u0161vardink visus ra\u0161ytojus laim\u0117jusius nobelio literat\u016bros premij\u0105",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "show me all basketball players that are higher than 2 meters\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all basketball players that are higher than 2 meters",
        "question": "show me all basketball players that are higher than 2 meters",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "mu\u00e9strame todos los jugadores de baloncesto que miden m\u00e1s de 2 metros de altura\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all basketball players that are higher than 2 meters",
        "question": "mu\u00e9strame todos los jugadores de baloncesto que miden m\u00e1s de 2 metros de altura",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle basketballspieler auf die gr\u00f6\u00dfer als 2 meter sind\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all basketball players that are higher than 2 meters",
        "question": "liste alle basketballspieler auf die gr\u00f6\u00dfer als 2 meter sind",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u043c\u043d\u0435 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0441 \u0431\u0430\u0441\u043a\u0435\u0442\u0431\u043e\u043b \u0432\u044b\u0448\u0435 2 \u043c\u0435\u0442\u0440\u043e\u0432\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all basketball players that are higher than 2 meters",
        "question": "\u043f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u043c\u043d\u0435 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0441 \u0431\u0430\u0441\u043a\u0435\u0442\u0431\u043e\u043b \u0432\u044b\u0448\u0435 2 \u043c\u0435\u0442\u0440\u043e\u0432",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "montrezmoi tous les joueurs de basketball qui font plus de 2 m\u00e8tres\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all basketball players that are higher than 2 meters",
        "question": "montrezmoi tous les joueurs de basketball qui font plus de 2 m\u00e8tres",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "parodyk man visus krep\u0161ininkus vir\u0161 dviej\u0173 metr\u0173\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all basketball players that are higher than 2 meters",
        "question": "parodyk man visus krep\u0161ininkus vir\u0161 dviej\u0173 metr\u0173",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "when was the statue of liberty built\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "when was the statue of liberty built",
        "question": "when was the statue of liberty built",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "cu\u00e1ndo fue construida la estatua de la libertad\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "when was the statue of liberty built",
        "question": "cu\u00e1ndo fue construida la estatua de la libertad",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wann wurde die freiheitsstatue erbaut\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "when was the statue of liberty built",
        "question": "wann wurde die freiheitsstatue erbaut",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u043e\u0433\u0434\u0430 \u0431\u044b\u043b\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u0441\u0442\u0430\u0442\u0443\u044f \u0441\u0432\u043e\u0431\u043e\u0434\u044b\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "when was the statue of liberty built",
        "question": "\u043a\u043e\u0433\u0434\u0430 \u0431\u044b\u043b\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u0441\u0442\u0430\u0442\u0443\u044f \u0441\u0432\u043e\u0431\u043e\u0434\u044b",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quand la statue de la lib\u00e9rt\u00e9 atelle \u00e9t\u00e9 \u00e9difi\u00e9e \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "when was the statue of liberty built",
        "question": "quand la statue de la lib\u00e9rt\u00e9 atelle \u00e9t\u00e9 \u00e9difi\u00e9e ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kada buvo pastatyta laisv\u0117s statula\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "when was the statue of liberty built",
        "question": "kada buvo pastatyta laisv\u0117s statula",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which states border illinois\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which states border illinois",
        "question": "which states border illinois",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 estados tienen frontera con illinois\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which states border illinois",
        "question": "qu\u00e9 estados tienen frontera con illinois",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche staaten grenzen an illinois\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which states border illinois",
        "question": "welche staaten grenzen an illinois",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0448\u0442\u0430\u0442\u044b \u0433\u0440\u0430\u043d\u0438\u0447\u0430\u0442 \u0441 \u0438\u043b\u043b\u0438\u043d\u043e\u0439\u0441\u043e\u043c\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which states border illinois",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0448\u0442\u0430\u0442\u044b \u0433\u0440\u0430\u043d\u0438\u0447\u0430\u0442 \u0441 \u0438\u043b\u043b\u0438\u043d\u043e\u0439\u0441\u043e\u043c",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels \u00e9tats bordent lillinois \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which states border illinois",
        "question": "quels \u00e9tats bordent lillinois ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "su kokiomis valstijomis ribojasi ilinojus\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which states border illinois",
        "question": "su kokiomis valstijomis ribojasi ilinojus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed minecraft\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed minecraft",
        "question": "who developed minecraft",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n desarroll\u00f3 minecraft\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed minecraft",
        "question": "qui\u00e9n desarroll\u00f3 minecraft",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer entwickelte minecraft\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed minecraft",
        "question": "wer entwickelte minecraft",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u0438\u0433\u0440\u0443 \u043c\u0430\u0439\u043d\u043a\u0440\u0430\u0444\u0442\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed minecraft",
        "question": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u0438\u0433\u0440\u0443 \u043c\u0430\u0439\u043d\u043a\u0440\u0430\u0444\u0442",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui a d\u00e9velopp\u00e9 minecraft \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed minecraft",
        "question": "qui a d\u00e9velopp\u00e9 minecraft ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas suk\u016br\u0117 minecraft\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed minecraft",
        "question": "kas suk\u016br\u0117 minecraft",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "where did hillel slovak die\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did hillel slovak die",
        "question": "where did hillel slovak die",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "d\u00f3nde muri\u00f3 hillel slovak\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did hillel slovak die",
        "question": "d\u00f3nde muri\u00f3 hillel slovak",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wo ist hillel slovak gestorben\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did hillel slovak die",
        "question": "wo ist hillel slovak gestorben",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0433\u0434\u0435 \u0443\u043c\u0435\u0440 \u0433\u0438\u043b\u0435\u043b\u044c \u0441\u043b\u043e\u0432\u0430\u043a\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did hillel slovak die",
        "question": "\u0433\u0434\u0435 \u0443\u043c\u0435\u0440 \u0433\u0438\u043b\u0435\u043b\u044c \u0441\u043b\u043e\u0432\u0430\u043a",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "o\u00f9 est mort hillel slovak \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did hillel slovak die",
        "question": "o\u00f9 est mort hillel slovak ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kur mir\u0117 hillelis slovakas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did hillel slovak die",
        "question": "kur mir\u0117 hillelis slovakas",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what movies does jesse eisenberg play in\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what movies does jesse eisenberg play in",
        "question": "what movies does jesse eisenberg play in",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en qu\u00e9 pel\u00edculas act\u00faa jesse eisenberg\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what movies does jesse eisenberg play in",
        "question": "en qu\u00e9 pel\u00edculas act\u00faa jesse eisenberg",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welchen filmen spielt jesse eisenberg mit\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what movies does jesse eisenberg play in",
        "question": "in welchen filmen spielt jesse eisenberg mit",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0437 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0438\u0433\u0440\u0430\u0435\u0442 \u0434\u0436\u0435\u0441\u0441\u0438 \u0430\u0439\u0437\u0435\u043d\u0431\u0435\u0440\u0433\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what movies does jesse eisenberg play in",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0437 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0438\u0433\u0440\u0430\u0435\u0442 \u0434\u0436\u0435\u0441\u0441\u0438 \u0430\u0439\u0437\u0435\u043d\u0431\u0435\u0440\u0433",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dans quels films joue jesse eisenberg \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what movies does jesse eisenberg play in",
        "question": "dans quels films joue jesse eisenberg ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokiuose filmuose vaidino jesse eisenberg\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what movies does jesse eisenberg play in",
        "question": "kokiuose filmuose vaidino jesse eisenberg",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give all swimmers that were born in moscow\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give all swimmers that were born in moscow",
        "question": "give all swimmers that were born in moscow",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame todos los nadadores nacidos en mosc\u00fa\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give all swimmers that were born in moscow",
        "question": "dame todos los nadadores nacidos en mosc\u00fa",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle schwimmer auf die in moskau geboren wurden\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give all swimmers that were born in moscow",
        "question": "liste alle schwimmer auf die in moskau geboren wurden",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u043f\u043b\u043e\u0432\u0446\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0440\u043e\u0436\u0434\u0435\u043d\u044b \u0432 \u043c\u043e\u0441\u043a\u0432\u0435\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give all swimmers that were born in moscow",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u043f\u043b\u043e\u0432\u0446\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0440\u043e\u0436\u0434\u0435\u043d\u044b \u0432 \u043c\u043e\u0441\u043a\u0432\u0435",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi tous les nageurs n\u00e9s \u00e0 moscou\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give all swimmers that were born in moscow",
        "question": "donnezmoi tous les nageurs n\u00e9s \u00e0 moscou",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "pasakyk man visus plaukikus gimusius maskvoje\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give all swimmers that were born in moscow",
        "question": "pasakyk man visus plaukikus gimusius maskvoje",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all cosmonauts\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all cosmonauts",
        "question": "give me all cosmonauts",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame todos los cosmonautas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all cosmonauts",
        "question": "dame todos los cosmonautas",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "gib mir alle astronauten\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all cosmonauts",
        "question": "gib mir alle astronauten",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u0441\u043c\u043e\u043d\u0430\u0432\u0442\u043e\u0432\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all cosmonauts",
        "question": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u0441\u043c\u043e\u043d\u0430\u0432\u0442\u043e\u0432",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnemoi tous les astronautes\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all cosmonauts",
        "question": "donnemoi tous les astronautes",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardykite visus astronautus\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all cosmonauts",
        "question": "i\u0161vardykite visus astronautus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all swiss nonprofit organizations\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all swiss nonprofit organizations",
        "question": "give me all swiss nonprofit organizations",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame todas las organizaciones suizas sin fines de lucro\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all swiss nonprofit organizations",
        "question": "dame todas las organizaciones suizas sin fines de lucro",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle schweizer ngos auf\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all swiss nonprofit organizations",
        "question": "liste alle schweizer ngos auf",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435 \u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u043a\u0438\u0435 \u043d\u0435\u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all swiss nonprofit organizations",
        "question": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435 \u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u043a\u0438\u0435 \u043d\u0435\u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "list all boardgames by gmt",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 juegos de mesa fueron hechos por gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "qu\u00e9 juegos de mesa fueron hechos por gmt",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "zeige mir alle brettspiele von gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "zeige mir alle brettspiele von gmt",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0438\u0433\u0440\u044b gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0438\u0433\u0440\u044b gmt",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "listez tous les jeux de soci\u00e9t\u00e9 de gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "listez tous les jeux de soci\u00e9t\u00e9 de gmt",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardykite visus gmt \u017eaidimus\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "i\u0161vardykite visus gmt \u017eaidimus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "who developed skype",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n desarroll\u00f3 skype\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "qui\u00e9n desarroll\u00f3 skype",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer hat skype entwickelt\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "wer hat skype entwickelt",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b skype\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b skype",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui a d\u00e9velopp\u00e9 skype \nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "qui a d\u00e9velopp\u00e9 skype ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas suk\u016br\u0117 \u201eskype\u201c\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "kas suk\u016br\u0117 \u201eskype\u201c",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "which people were born in heraklion",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 personas nacieron en heraklion\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "qu\u00e9 personas nacieron en heraklion",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche menschen wurden in heraklion geboren\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "welche menschen wurden in heraklion geboren",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043b\u044e\u0434\u0438 \u0440\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u0432 \u0438\u0440\u0430\u043a\u043b\u0438\u043e\u043d\u0435\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043b\u044e\u0434\u0438 \u0440\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u0432 \u0438\u0440\u0430\u043a\u043b\u0438\u043e\u043d\u0435",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est n\u00e9 \u00e0 heraklion \nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "qui est n\u00e9 \u00e0 heraklion ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas gim\u0117 heraklione\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "kas gim\u0117 heraklione",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "in which us state is area 51 located",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en cu\u00e1l estado de estados unidos esta situada el area 51\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "en cu\u00e1l estado de estados unidos esta situada el area 51",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welchem us bundesstaat liegt area 51\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "in welchem us bundesstaat liegt area 51",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u043e\u043c \u0448\u0442\u0430\u0442\u0435 \u0441\u0448\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u043e\u043d\u0430 51\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "\u0432 \u043a\u0430\u043a\u043e\u043c \u0448\u0442\u0430\u0442\u0435 \u0441\u0448\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u043e\u043d\u0430 51",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dans quel etat des etatsunis se situe larea 51 \nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "dans quel etat des etatsunis se situe larea 51 ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurioje jav valstijoje yra karin\u0117 baz\u0117 51 zona\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "kurioje jav valstijoje yra karin\u0117 baz\u0117 51 zona",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "who is the mayor of new york city",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n es el alcalde de la cuidad de nueva york\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "qui\u00e9n es el alcalde de la cuidad de nueva york",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer ist der b\u00fcrgermeister von new york city\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "wer ist der b\u00fcrgermeister von new york city",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u043c\u0435\u0440 \u043d\u044c\u044e \u0439\u043e\u0440\u043a\u0430\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "\u043a\u0442\u043e \u043c\u0435\u0440 \u043d\u044c\u044e \u0439\u043e\u0440\u043a\u0430",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le maire de la cit\u00e9 de new york \nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "qui est le maire de la cit\u00e9 de new york ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas yra niujorko meras\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "kas yra niujorko meras",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which countries have places with more than two caves\nAMR: (h / have-03 :ARG0 (c / country :mod (a / amr-unknown)) :ARG1 (p / place :ARG0-of (h2 / have-03 :ARG1 (c2 / cave :quant (m / more-than :op1 2)))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "which countries have places with more than two caves",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 pa\u00edses tienen lugares con m\u00e1s de dos cuevas\nAMR: (h / have-03 :ARG0 (c / country :mod (a / amr-unknown)) :ARG1 (p / place :ARG0-of (h2 / have-03 :ARG1 (c2 / cave :quant (m / more-than :op1 2)))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "qu\u00e9 pa\u00edses tienen lugares con m\u00e1s de dos cuevas",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welche l\u00e4ndern gibt es mehr als 2 h\u00f6hlen\nAMR: (h / have-03 :ARG0 (c / country :mod (a / amr-unknown)) :ARG1 (p / place :ARG0-of (h2 / have-03 :ARG1 (c2 / cave :quant (m / more-than :op1 2)))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "in welche l\u00e4ndern gibt es mehr als 2 h\u00f6hlen",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0435\u0441\u0442\u044c \u043c\u0435\u0441\u0442\u0430 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0449\u0435\u0440 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u0434\u0432\u0435\nAMR: (h / have-03 :ARG0 (c / country :mod (a / amr-unknown)) :ARG1 (p / place :ARG0-of (h2 / have-03 :ARG1 (c2 / cave :quant (m / more-than :op1 2)))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0435\u0441\u0442\u044c \u043c\u0435\u0441\u0442\u0430 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0449\u0435\u0440 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u0434\u0432\u0435",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le maire de la cit\u00e9 de new york \nAMR: (h / have-03 :ARG0 (c / country :mod (a / amr-unknown)) :ARG1 (p / place :ARG0-of (h2 / have-03 :ARG1 (c2 / cave :quant (m / more-than :op1 2)))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "qui est le maire de la cit\u00e9 de new york ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kuriose \u0161alyse yra viet\u0173 kuriose yra daugiau nei du urvai\nAMR: (h / have-03 :ARG0 (c / country :mod (a / amr-unknown)) :ARG1 (p / place :ARG0-of (h2 / have-03 :ARG1 (c2 / cave :quant (m / more-than :op1 2)))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "kuriose \u0161alyse yra viet\u0173 kuriose yra daugiau nei du urvai",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Abraham\" :op2 \"Lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "where did abraham lincoln die",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "d\u00f3nde muri\u00f3 abraham lincoln\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Abraham\" :op2 \"Lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "d\u00f3nde muri\u00f3 abraham lincoln",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wo ist abraham lincoln gestorben\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Abraham\" :op2 \"Lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "wo ist abraham lincoln gestorben",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u043e\u0433\u0434\u0430 \u0443\u043c\u0435\u0440 \u0430\u0431\u0440\u0430\u0445\u0430\u043c \u043b\u0438\u043d\u043a\u043e\u043b\u044c\u043d\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Abraham\" :op2 \"Lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "\u043a\u043e\u0433\u0434\u0430 \u0443\u043c\u0435\u0440 \u0430\u0431\u0440\u0430\u0445\u0430\u043c \u043b\u0438\u043d\u043a\u043e\u043b\u044c\u043d",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "o\u00f9 est d\u00e9c\u00e9d\u00e9 abraham lincoln \nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Abraham\" :op2 \"Lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "o\u00f9 est d\u00e9c\u00e9d\u00e9 abraham lincoln ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kur mire abraomas linkolnas\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Abraham\" :op2 \"Lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "kur mire abraomas linkolnas",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "which airports does air china serve",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en qu\u00e9 aeropuertos opera air china\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "en qu\u00e9 aeropuertos opera air china",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche flugh\u00e4fen bedient air china\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "welche flugh\u00e4fen bedient air china",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 air china\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 air china",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels a\u00e9roports sont desservis par air china \nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "quels a\u00e9roports sont desservis par air china ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "oro uostai kuriuos aptarnauja \u201eair china\u201c\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "oro uostai kuriuos aptarnauja \u201eair china\u201c",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "give me all actors starring in movies directed by and starring william shatner",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 actores protagonizan pel\u00edculas dirigidas y protagonizadas por william shatner\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "qu\u00e9 actores protagonizan pel\u00edculas dirigidas y protagonizadas por william shatner",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "gib mir alle schauspieler die in filmen gespielt haben in dem william shatner gespielt und gleichyeitig regie gef\u00fchrt hat\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "gib mir alle schauspieler die in filmen gespielt haben in dem william shatner gespielt und gleichyeitig regie gef\u00fchrt hat",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u043a\u0442\u0435\u0440\u043e\u0432 \u0441\u043d\u0438\u043c\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0440\u043e\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0443\u0438\u043b\u044c\u044f\u043c\u043e\u043c \u0448\u0435\u0442\u043d\u0435\u0440\u043e\u043c\u0432 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043c \u0441\u0430\u043c\u0438\u043c\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u043a\u0442\u0435\u0440\u043e\u0432 \u0441\u043d\u0438\u043c\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0440\u043e\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0443\u0438\u043b\u044c\u044f\u043c\u043e\u043c \u0448\u0435\u0442\u043d\u0435\u0440\u043e\u043c\u0432 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043c \u0441\u0430\u043c\u0438\u043c",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi tous les acteurs qui figurent dans les films r\u00e9alis\u00e9s par william shatner\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "donnezmoi tous les acteurs qui figurent dans les films r\u00e9alis\u00e9s par william shatner",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokie aktoriai vaidino filmuose kuriuose re\u017eisierius ir aktorius buvo williamas shatneris\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "kokie aktoriai vaidino filmuose kuriuose re\u017eisierius ir aktorius buvo williamas shatneris",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "what are the official languages of the philippines",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "cu\u00e1les son los idiomas oficiales de filipinas\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "cu\u00e1les son los idiomas oficiales de filipinas",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "was ist die amtssprache auf den philippinen\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "was ist die amtssprache auf den philippinen",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438 \u043d\u0430 \u0444\u0438\u043b\u043b\u0438\u043f\u0438\u043d\u0430\u0445\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438 \u043d\u0430 \u0444\u0438\u043b\u043b\u0438\u043f\u0438\u043d\u0430\u0445",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels sont les langues officielles des philippines \nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "quels sont les langues officielles des philippines ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokios yra oficialios filipin\u0173 kalbos\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "kokios yra oficialios filipin\u0173 kalbos",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "give me all danish films",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame todas las pel\u00edculas danesas\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "dame todas las pel\u00edculas danesas",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste als d\u00e4nischen filme auf\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "liste als d\u00e4nischen filme auf",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0434\u0430\u0442\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u043c\u044b\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0434\u0430\u0442\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u043c\u044b",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi tous les films danois\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "donnezmoi tous les films danois",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u012fvardykite visus dan\u0173 filmus\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "\u012fvardykite visus dan\u0173 filmus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "which movies starring brad pitt were directed by guy ritchie",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 pel\u00edculas protagonizadas por brad pitt han sido dirigidas por guy ritchie\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "qu\u00e9 pel\u00edculas protagonizadas por brad pitt han sido dirigidas por guy ritchie",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste brad pitt filme auf in denen guy ritchie regie gef\u00fchrt hat\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "liste brad pitt filme auf in denen guy ritchie regie gef\u00fchrt hat",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0433\u0430\u0435\u043c \u0440\u0438\u0447\u0438\u0438 \u0441\u043d\u0438\u043c\u0430\u043b\u0441\u044f \u0431\u0440\u044d\u0434 \u043f\u0438\u0442\u0442\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0433\u0430\u0435\u043c \u0440\u0438\u0447\u0438\u0438 \u0441\u043d\u0438\u043c\u0430\u043b\u0441\u044f \u0431\u0440\u044d\u0434 \u043f\u0438\u0442\u0442",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels films avec brad pitt sont r\u00e9alis\u00e9s par guy ritchie \nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "quels films avec brad pitt sont r\u00e9alis\u00e9s par guy ritchie ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokius filmus su bradu pittu re\u017eisavo guy ritchie\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "kokius filmus su bradu pittu re\u017eisavo guy ritchie",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "give me the grandchildren of bruce lee",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9nes son los nietos de bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "qui\u00e9nes son los nietos de bruce lee",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "zeige die enkelkinder von bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "zeige die enkelkinder von bruce lee",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u043d\u0443\u043a\u043e\u0432 \u0431\u0440\u044e\u0441\u0430 \u043b\u0438\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u043d\u0443\u043a\u043e\u0432 \u0431\u0440\u044e\u0441\u0430 \u043b\u0438",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnemoi les petitsenfants de bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "donnemoi les petitsenfants de bruce lee",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "duok man bruceo lee an\u016bkus\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "duok man bruceo lee an\u016bkus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "which other weapons did the designer of the uzi develop",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 otras armas desarroll\u00f3 el dise\u00f1ador de la uzi\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "qu\u00e9 otras armas desarroll\u00f3 el dise\u00f1ador de la uzi",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche anderen waffen wurden vom designer der uzi entwickelt\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "welche anderen waffen wurden vom designer der uzi entwickelt",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0438\u043d\u044b\u0435 \u043e\u0440\u0443\u0436\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0435\u043b \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c \u0443\u0437\u0438\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0438\u043d\u044b\u0435 \u043e\u0440\u0443\u0436\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0435\u043b \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c \u0443\u0437\u0438",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quelles autres armes ont \u00e9t\u00e9 d\u00e9velopp\u00e9es par le cr\u00e9ateur du uzi \nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "quelles autres armes ont \u00e9t\u00e9 d\u00e9velopp\u00e9es par le cr\u00e9ateur du uzi ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokius kitus ginklus suk\u016br\u0117 uzi konstruktorius\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "kokius kitus ginklus suk\u016br\u0117 uzi konstruktorius",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "who is the owner of universal studios",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n es el due\u00f1o de universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "qui\u00e9n es el due\u00f1o de universal studios",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wem geh\u00f6ren die universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "wem geh\u00f6ren die universal studios",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c universal studios",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le propri\u00e9taire de universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "qui est le propri\u00e9taire de universal studios",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas yra \u201euniversal studios\u201c savininkas\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "kas yra \u201euniversal studios\u201c savininkas",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which state of the usa has the highest population density\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"USA\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most)) :mod (p / populate-01)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "which state of the usa has the highest population density",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "cu\u00e1l estado de estados unidos tiene la mayor densidad poblacional\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"USA\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most)) :mod (p / populate-01)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "cu\u00e1l estado de estados unidos tiene la mayor densidad poblacional",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welcher staat in den usa hat die h\u00f6chste bev\u00f6lkerungsdichte\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"USA\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most)) :mod (p / populate-01)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "welcher staat in den usa hat die h\u00f6chste bev\u00f6lkerungsdichte",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u0448\u0442\u0430\u0442\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u0441\u0430\u043c\u0443\u044e \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0448\u0430\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"USA\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most)) :mod (p / populate-01)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "\u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u0448\u0442\u0430\u0442\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u0441\u0430\u043c\u0443\u044e \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0448\u0430",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quel \u00e9tat des \u00e9tats unis a la densit\u00e9 de population la plus \u00e9lev\u00e9e\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"USA\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most)) :mod (p / populate-01)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "quel \u00e9tat des \u00e9tats unis a la densit\u00e9 de population la plus \u00e9lev\u00e9e",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurioje jav valstijoje gyventoj\u0173 tankumas did\u017eiausias\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"USA\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most)) :mod (p / populate-01)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "kurioje jav valstijoje gyventoj\u0173 tankumas did\u017eiausias",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which monarchs were married to a german\nAMR: (m / marry-01 :ARG1 (a2 / amr-unknown :ARG0-of (h / have-org-role-91 :ARG2 (m2 / monarch))) :ARG2 (p2 / person :mod (c / country :name (n / name :op1 \"Germany\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "which monarchs were married to a german",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 monarcas estaban casados con una persona alemana\nAMR: (m / marry-01 :ARG1 (a2 / amr-unknown :ARG0-of (h / have-org-role-91 :ARG2 (m2 / monarch))) :ARG2 (p2 / person :mod (c / country :name (n / name :op1 \"Germany\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "qu\u00e9 monarcas estaban casados con una persona alemana",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche monarchen waren mit deutschen verheiratet\nAMR: (m / marry-01 :ARG1 (a2 / amr-unknown :ARG0-of (h / have-org-role-91 :ARG2 (m2 / monarch))) :ARG2 (p2 / person :mod (c / country :name (n / name :op1 \"Germany\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "welche monarchen waren mit deutschen verheiratet",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0438\u0437 \u043c\u043e\u043d\u0430\u0440\u0445\u043e\u0432 \u0431\u044b\u043b \u0436\u0435\u043d\u0430\u0442 \u043d\u0430 \u043d\u0435\u043c\u043a\u0435\nAMR: (m / marry-01 :ARG1 (a2 / amr-unknown :ARG0-of (h / have-org-role-91 :ARG2 (m2 / monarch))) :ARG2 (p2 / person :mod (c / country :name (n / name :op1 \"Germany\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "\u043a\u0442\u043e \u0438\u0437 \u043c\u043e\u043d\u0430\u0440\u0445\u043e\u0432 \u0431\u044b\u043b \u0436\u0435\u043d\u0430\u0442 \u043d\u0430 \u043d\u0435\u043c\u043a\u0435",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels monarques ont \u00e9t\u00e9 mari\u00e9s \u00e0 des allemands \nAMR: (m / marry-01 :ARG1 (a2 / amr-unknown :ARG0-of (h / have-org-role-91 :ARG2 (m2 / monarch))) :ARG2 (p2 / person :mod (c / country :name (n / name :op1 \"Germany\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "quels monarques ont \u00e9t\u00e9 mari\u00e9s \u00e0 des allemands ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurie monarchai buvo ved\u0119 vokietes\nAMR: (m / marry-01 :ARG1 (a2 / amr-unknown :ARG0-of (h / have-org-role-91 :ARG2 (m2 / monarch))) :ARG2 (p2 / person :mod (c / country :name (n / name :op1 \"Germany\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "kurie monarchai buvo ved\u0119 vokietes",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which organizations were founded in 1950\nAMR: (f / found-01 :ARG1 (o / organization :mod (a / amr-unknown)) :time (d / date-entity :year 1950))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "which organizations were founded in 1950",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 organizaciones fueron establecidas en 1950\nAMR: (f / found-01 :ARG1 (o / organization :mod (a / amr-unknown)) :time (d / date-entity :year 1950))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "qu\u00e9 organizaciones fueron establecidas en 1950",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche organisationen wurden 1950 gegr\u00fcndet\nAMR: (f / found-01 :ARG1 (o / organization :mod (a / amr-unknown)) :time (d / date-entity :year 1950))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "welche organisationen wurden 1950 gegr\u00fcndet",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u044b\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b \u0432 1950 \u0433\u043e\u0434\u0443\nAMR: (f / found-01 :ARG1 (o / organization :mod (a / amr-unknown)) :time (d / date-entity :year 1950))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u044b\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b \u0432 1950 \u0433\u043e\u0434\u0443",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quelles organisations ont \u00e9t\u00e9 fond\u00e9es en 1950 \nAMR: (f / found-01 :ARG1 (o / organization :mod (a / amr-unknown)) :time (d / date-entity :year 1950))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "quelles organisations ont \u00e9t\u00e9 fond\u00e9es en 1950 ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokios organizacijos buvo \u012fkurtos 1930 m\nAMR: (f / found-01 :ARG1 (o / organization :mod (a / amr-unknown)) :time (d / date-entity :year 1950))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "kokios organizacijos buvo \u012fkurtos 1930 m",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "who created the comic captain america",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n cre\u00f3 el comic capit\u00e1n am\u00e9rica\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "qui\u00e9n cre\u00f3 el comic capit\u00e1n am\u00e9rica",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer ist der sch\u00f6pfer von captain america\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "wer ist der sch\u00f6pfer von captain america",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u0440\u043e\u043c \u043a\u043e\u043c\u0438\u043a\u0441\u0430 \u043a\u0430\u043f\u0438\u0442\u0430\u043d \u0430\u043c\u0435\u0440\u0438\u043a\u0430\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u0440\u043e\u043c \u043a\u043e\u043c\u0438\u043a\u0441\u0430 \u043a\u0430\u043f\u0438\u0442\u0430\u043d \u0430\u043c\u0435\u0440\u0438\u043a\u0430",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui a cr\u00e9\u00e9 le comic captain america\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "qui a cr\u00e9\u00e9 le comic captain america",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas suk\u016br\u0117 kapitono amerikos komiks\u0105\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "kas suk\u016br\u0117 kapitono amerikos komiks\u0105",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the apollo 14 astronauts\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (a / astronaut :mod (s / spaceship :name (n / name :op1 \"Apollo\" :op2 \"14\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "give me the apollo 14 astronauts",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 astronautas participaron en la misi\u00f3n apolo 14\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (a / astronaut :mod (s / spaceship :name (n / name :op1 \"Apollo\" :op2 \"14\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "qu\u00e9 astronautas participaron en la misi\u00f3n apolo 14",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer war an bord der apollo 14\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (a / astronaut :mod (s / spaceship :name (n / name :op1 \"Apollo\" :op2 \"14\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "wer war an bord der apollo 14",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u044d\u043a\u0438\u043f\u0430\u0436 \u0430\u043f\u043e\u043b\u043b\u043e 14\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (a / astronaut :mod (s / spaceship :name (n / name :op1 \"Apollo\" :op2 \"14\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u044d\u043a\u0438\u043f\u0430\u0436 \u0430\u043f\u043e\u043b\u043b\u043e 14",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnemoi tous les astronautes dapollo 14\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (a / astronaut :mod (s / spaceship :name (n / name :op1 \"Apollo\" :op2 \"14\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "donnemoi tous les astronautes dapollo 14",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "pasakyk man apollo 14 astronaut\u0173 vardus\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (a / astronaut :mod (s / spaceship :name (n / name :op1 \"Apollo\" :op2 \"14\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "pasakyk man apollo 14 astronaut\u0173 vardus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "who wrote the book the pillars of the earth",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n escribi\u00f3 el libro los pilares de la tierra\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "qui\u00e9n escribi\u00f3 el libro los pilares de la tierra",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer hat das buch die s\u00e4ulen der welt geschrieben\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "wer hat das buch die s\u00e4ulen der welt geschrieben",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0430\u0432\u0442\u043e\u0440 \u043a\u043d\u0438\u0433\u0438 \u0441\u0442\u043e\u043b\u043f\u044b \u0437\u0435\u043c\u043b\u0438\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "\u043a\u0442\u043e \u0430\u0432\u0442\u043e\u0440 \u043a\u043d\u0438\u0433\u0438 \u0441\u0442\u043e\u043b\u043f\u044b \u0437\u0435\u043c\u043b\u0438",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quelles f\u00eates sont c\u00e9l\u00e9br\u00e9es dans le monde entier\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "quelles f\u00eates sont c\u00e9l\u00e9br\u00e9es dans le monde entier",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "ar neimaras \u017eaid\u0117 u\u017e real madrid \nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "ar neimaras \u017eaid\u0117 u\u017e real madrid ",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which state of the united states of america has the highest density\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"United\" :op2 \"States\" :op3 \"of\" :op4 \"America\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "which state of the united states of america has the highest density",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 estado de los estados unidos de am\u00e9rica tiene la mayor densidad poblacional\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"United\" :op2 \"States\" :op3 \"of\" :op4 \"America\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "qu\u00e9 estado de los estados unidos de am\u00e9rica tiene la mayor densidad poblacional",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welcher usbundesstaat hat die h\u00f6chste bev\u00f6lkerungsdichte\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"United\" :op2 \"States\" :op3 \"of\" :op4 \"America\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "welcher usbundesstaat hat die h\u00f6chste bev\u00f6lkerungsdichte",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u043e\u0439 \u0448\u0442\u0430\u0442 \u0441\u0448\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"United\" :op2 \"States\" :op3 \"of\" :op4 \"America\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "\u043a\u0430\u043a\u043e\u0439 \u0448\u0442\u0430\u0442 \u0441\u0448\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quel \u00e9tat des usa a la plus grande densit\u00e9 \nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"United\" :op2 \"States\" :op3 \"of\" :op4 \"America\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "quel \u00e9tat des usa a la plus grande densit\u00e9 ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurioje jungtini\u0173 amerikos valstij\u0173 valstijoje gyventoj\u0173 tankumas did\u017eiausias\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"United\" :op2 \"States\" :op3 \"of\" :op4 \"America\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "kurioje jungtini\u0173 amerikos valstij\u0173 valstijoje gyventoj\u0173 tankumas did\u017eiausias",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which spaceflights were launched from baikonur\nAMR: (l / launch-01 :ARG1 (s / spaceflight :mod (a / amr-unknown)) :source (c / city :name (n / name :op1 \"Baikonur\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "which spaceflights were launched from baikonur",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 misiones espaciales partieron desde baikonur\nAMR: (l / launch-01 :ARG1 (s / spaceflight :mod (a / amr-unknown)) :source (c / city :name (n / name :op1 \"Baikonur\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "qu\u00e9 misiones espaciales partieron desde baikonur",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche raumfl\u00fcge starteten von baikonur aus\nAMR: (l / launch-01 :ARG1 (s / spaceflight :mod (a / amr-unknown)) :source (c / city :name (n / name :op1 \"Baikonur\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "welche raumfl\u00fcge starteten von baikonur aus",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043a\u043e\u0441\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\u0438 \u0441 \u0431\u0430\u0439\u043a\u043e\u043d\u0443\u0440\u0430\nAMR: (l / launch-01 :ARG1 (s / spaceflight :mod (a / amr-unknown)) :source (c / city :name (n / name :op1 \"Baikonur\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043a\u043e\u0441\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\u0438 \u0441 \u0431\u0430\u0439\u043a\u043e\u043d\u0443\u0440\u0430",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels vols spatiaux ont \u00e9t\u00e9 lanc\u00e9s depuis ba\u00efkonour \nAMR: (l / launch-01 :ARG1 (s / spaceflight :mod (a / amr-unknown)) :source (c / city :name (n / name :op1 \"Baikonur\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "quels vols spatiaux ont \u00e9t\u00e9 lanc\u00e9s depuis ba\u00efkonour ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokie erdv\u0117laiviai buvo paleisti i\u0161 baikon\u016bro\nAMR: (l / launch-01 :ARG1 (s / spaceflight :mod (a / amr-unknown)) :source (c / city :name (n / name :op1 \"Baikonur\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "kokie erdv\u0117laiviai buvo paleisti i\u0161 baikon\u016bro",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "give me a list of all trumpet players that were bandleaders",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame una lista de todos los trompeteros que fueron l\u00edderes de una banda\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "dame una lista de todos los trompeteros que fueron l\u00edderes de una banda",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle trompetenspieler auf die bandleader einer band waren\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "liste alle trompetenspieler auf die bandleader einer band waren",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0442\u0440\u0443\u0431\u0430\u0447\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043b\u0438\u0434\u0435\u0440\u0430\u043c\u0438 \u0433\u0440\u0443\u043f\u043f\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0442\u0440\u0443\u0431\u0430\u0447\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043b\u0438\u0434\u0435\u0440\u0430\u043c\u0438 \u0433\u0440\u0443\u043f\u043f",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi une liste de tous les joueurs de trempette qui sont chefs de groupe\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "donnezmoi une liste de tous les joueurs de trempette qui sont chefs de groupe",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardykite visus trimitus kurie buvo orkestro dirigentai\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "i\u0161vardykite visus trimitus kurie buvo orkestro dirigentai",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which us states are in the same timezone as utah\nAMR: (b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "which us states are in the same timezone as utah",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 estados de eeuu se encuentran en la misma zona horaria que utah\nAMR: (b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "qu\u00e9 estados de eeuu se encuentran en la misma zona horaria que utah",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche usstaaten liegen in der gleichen zeitzone wie utah\nAMR: (b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "welche usstaaten liegen in der gleichen zeitzone wie utah",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0448\u0442\u0430\u0442\u044b \u0441\u0448\u0430 \u0432 \u0442\u043e\u043c \u0436\u0435 \u0447\u0430\u0441\u043e\u0432\u043e\u043c \u043f\u043e\u044f\u0441\u0435 \u0447\u0442\u043e \u0438 \u044e\u0442\u0430\nAMR: (b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0448\u0442\u0430\u0442\u044b \u0441\u0448\u0430 \u0432 \u0442\u043e\u043c \u0436\u0435 \u0447\u0430\u0441\u043e\u0432\u043e\u043c \u043f\u043e\u044f\u0441\u0435 \u0447\u0442\u043e \u0438 \u044e\u0442\u0430",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels \u00e9tats am\u00e9ricains sont dans le m\u00eame fuseau horaire que lutah \nAMR: (b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "quels \u00e9tats am\u00e9ricains sont dans le m\u00eame fuseau horaire que lutah ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurios jav valstijos yra toje pa\u010dioje laiko juostoje kaip juta\nAMR: (b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "kurios jav valstijos yra toje pa\u010dioje laiko juostoje kaip juta",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which us states possess gold minerals\nAMR: (p / possess-01 :ARG0 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG1 (m / mineral :mod (g / gold)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "which us states possess gold minerals",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en qu\u00e9 estados de los estados unidos de am\u00e9rica hay oro\nAMR: (p / possess-01 :ARG0 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG1 (m / mineral :mod (g / gold)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "en qu\u00e9 estados de los estados unidos de am\u00e9rica hay oro",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welchen usstaaten gibt es goldvorkommen\nAMR: (p / possess-01 :ARG0 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG1 (m / mineral :mod (g / gold)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "in welchen usstaaten gibt es goldvorkommen",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0448\u0442\u0430\u0442\u0430\u0445 \u0441\u0448\u0430 \u0435\u0441\u0442\u044c \u0437\u0430\u043b\u0435\u0436\u0438 \u0437\u043e\u043b\u043e\u0442\u043e\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043c\u0438\u043d\u0435\u0440\u0430\u043b\u043e\u0432\nAMR: (p / possess-01 :ARG0 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG1 (m / mineral :mod (g / gold)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0448\u0442\u0430\u0442\u0430\u0445 \u0441\u0448\u0430 \u0435\u0441\u0442\u044c \u0437\u0430\u043b\u0435\u0436\u0438 \u0437\u043e\u043b\u043e\u0442\u043e\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043c\u0438\u043d\u0435\u0440\u0430\u043b\u043e\u0432",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels \u00e9tats am\u00e9ricains sont dans le m\u00eame fuseau horaire que lutah \nAMR: (p / possess-01 :ARG0 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG1 (m / mineral :mod (g / gold)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "quels \u00e9tats am\u00e9ricains sont dans le m\u00eame fuseau horaire que lutah ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurios jav valstijos turi aukso atsargas\nAMR: (p / possess-01 :ARG0 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG1 (m / mineral :mod (g / gold)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "kurios jav valstijos turi aukso atsargas",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the daughter of ingrid bergman married to\nAMR: (m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the daughter of ingrid bergman married to",
        "question": "who is the daughter of ingrid bergman married to",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "con qui\u00e9n est\u00e1 casada la hija de ingrid bergman\nAMR: (m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the daughter of ingrid bergman married to",
        "question": "con qui\u00e9n est\u00e1 casada la hija de ingrid bergman",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "mit wem ist die tochter von ingrid bergman verheiratet\nAMR: (m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the daughter of ingrid bergman married to",
        "question": "mit wem ist die tochter von ingrid bergman verheiratet",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0437\u0430 \u043a\u0435\u043c \u0431\u044b\u043b\u0430 \u0437\u0430\u043c\u0443\u0436\u0435\u043c \u0434\u043e\u0447\u044c \u0438\u043d\u0433\u0440\u0438\u0434 \u0431\u0435\u0440\u0433\u043c\u0430\u043d\nAMR: (m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the daughter of ingrid bergman married to",
        "question": "\u0437\u0430 \u043a\u0435\u043c \u0431\u044b\u043b\u0430 \u0437\u0430\u043c\u0443\u0436\u0435\u043c \u0434\u043e\u0447\u044c \u0438\u043d\u0433\u0440\u0438\u0434 \u0431\u0435\u0440\u0433\u043c\u0430\u043d",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "avec qui la fille dingrid bergman estelle mari\u00e9e \nAMR: (m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the daughter of ingrid bergman married to",
        "question": "avec qui la fille dingrid bergman estelle mari\u00e9e ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "su kuo i\u0161tek\u0117jusi ingrid bergman dukra\nAMR: (m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the daughter of ingrid bergman married to",
        "question": "su kuo i\u0161tek\u0117jusi ingrid bergman dukra",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "how deep is lake placid\nAMR: (d / deep-02 :ARG1 (l / lake :name (n / name :op1 \"Lake\" :op2 \"Placid\")) :quant (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "how deep is lake placid",
        "question": "how deep is lake placid",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 tan profundo es el lago placid\nAMR: (d / deep-02 :ARG1 (l / lake :name (n / name :op1 \"Lake\" :op2 \"Placid\")) :quant (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "how deep is lake placid",
        "question": "qu\u00e9 tan profundo es el lago placid",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wie tief ist der lake placid\nAMR: (d / deep-02 :ARG1 (l / lake :name (n / name :op1 \"Lake\" :op2 \"Placid\")) :quant (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "how deep is lake placid",
        "question": "wie tief ist der lake placid",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u043e\u0432\u0430 \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u043e\u0437\u0435\u0440\u0430 \u043f\u043b\u044d\u0441\u0438\u0434\nAMR: (d / deep-02 :ARG1 (l / lake :name (n / name :op1 \"Lake\" :op2 \"Placid\")) :quant (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "how deep is lake placid",
        "question": "\u043a\u0430\u043a\u043e\u0432\u0430 \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u043e\u0437\u0435\u0440\u0430 \u043f\u043b\u044d\u0441\u0438\u0434",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "avec qui la fille dingrid bergman estelle mari\u00e9e \nAMR: (d / deep-02 :ARG1 (l / lake :name (n / name :op1 \"Lake\" :op2 \"Placid\")) :quant (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "how deep is lake placid",
        "question": "avec qui la fille dingrid bergman estelle mari\u00e9e ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokio gylio yra plasido e\u017eeras\nAMR: (d / deep-02 :ARG1 (l / lake :name (n / name :op1 \"Lake\" :op2 \"Placid\")) :quant (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Lake_Placid_(Texas)> dbo:maximumDepth ?n }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "how deep is lake placid",
        "question": "kokio gylio yra plasido e\u017eeras",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "show me all museums in london\nAMR: (s / show-01 :mode imperative :ARG0 (y / you) :ARG1 (m / museum :mod (a / all) :location (c / city :name (n / name :op1 \"London\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all museums in london",
        "question": "show me all museums in london",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "mu\u00e9strame todos los museos en londres\nAMR: (s / show-01 :mode imperative :ARG0 (y / you) :ARG1 (m / museum :mod (a / all) :location (c / city :name (n / name :op1 \"London\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all museums in london",
        "question": "mu\u00e9strame todos los museos en londres",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle museen in london auf\nAMR: (s / show-01 :mode imperative :ARG0 (y / you) :ARG1 (m / museum :mod (a / all) :location (c / city :name (n / name :op1 \"London\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all museums in london",
        "question": "liste alle museen in london auf",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u043c\u043d\u0435 \u0432\u0441\u0435 \u043c\u0443\u0437\u0435\u0438 \u043b\u043e\u043d\u0434\u043e\u043d\u0430\nAMR: (s / show-01 :mode imperative :ARG0 (y / you) :ARG1 (m / museum :mod (a / all) :location (c / city :name (n / name :op1 \"London\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all museums in london",
        "question": "\u043f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u043c\u043d\u0435 \u0432\u0441\u0435 \u043c\u0443\u0437\u0435\u0438 \u043b\u043e\u043d\u0434\u043e\u043d\u0430",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "montrezmoi tous les mus\u00e9es de londres\nAMR: (s / show-01 :mode imperative :ARG0 (y / you) :ARG1 (m / museum :mod (a / all) :location (c / city :name (n / name :op1 \"London\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all museums in london",
        "question": "montrezmoi tous les mus\u00e9es de londres",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardykite visus londono muziejus\nAMR: (s / show-01 :mode imperative :ARG0 (y / you) :ARG1 (m / museum :mod (a / all) :location (c / city :name (n / name :op1 \"London\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Museum> ; <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/London> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all museums in london",
        "question": "i\u0161vardykite visus londono muziejus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which caves have more than 3 entrances\nAMR: (h / have-03 :ARG0 (c / cave :mod (a / amr-unknown)) :ARG1 (e / enter-01 :quant (m / more-than :op1 3)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which caves have more than 3 entrances",
        "question": "which caves have more than 3 entrances",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 cuevas tienen m\u00e1s de 3 entradas\nAMR: (h / have-03 :ARG0 (c / cave :mod (a / amr-unknown)) :ARG1 (e / enter-01 :quant (m / more-than :op1 3)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which caves have more than 3 entrances",
        "question": "qu\u00e9 cuevas tienen m\u00e1s de 3 entradas",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche h\u00f6hlen haben mehr als drei h\u00f6hleneing\u00e4nge\nAMR: (h / have-03 :ARG0 (c / cave :mod (a / amr-unknown)) :ARG1 (e / enter-01 :quant (m / more-than :op1 3)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which caves have more than 3 entrances",
        "question": "welche h\u00f6hlen haben mehr als drei h\u00f6hleneing\u00e4nge",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u043f\u0435\u0449\u0435\u0440\u0430\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 3 \u0432\u0445\u043e\u0434\u043e\u0432\nAMR: (h / have-03 :ARG0 (c / cave :mod (a / amr-unknown)) :ARG1 (e / enter-01 :quant (m / more-than :op1 3)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which caves have more than 3 entrances",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u043f\u0435\u0449\u0435\u0440\u0430\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 3 \u0432\u0445\u043e\u0434\u043e\u0432",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "montrezmoi tous les mus\u00e9es de londres\nAMR: (h / have-03 :ARG0 (c / cave :mod (a / amr-unknown)) :ARG1 (e / enter-01 :quant (m / more-than :op1 3)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which caves have more than 3 entrances",
        "question": "montrezmoi tous les mus\u00e9es de londres",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kuriuose urvuose yra daugiau nei 3 \u012f\u0117jimai\nAMR: (h / have-03 :ARG0 (c / cave :mod (a / amr-unknown)) :ARG1 (e / enter-01 :quant (m / more-than :op1 3)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Cave> ; <http://dbpedia.org/property/entranceCount> ?entrance FILTER ( ?entrance > 3 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which caves have more than 3 entrances",
        "question": "kuriuose urvuose yra daugiau nei 3 \u012f\u0117jimai",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the tallest player of the atlanta falcons\nAMR: (h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the tallest player of the atlanta falcons",
        "question": "who is the tallest player of the atlanta falcons",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n es el jugador m\u00e1s alto de los atlanta falcons\nAMR: (h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the tallest player of the atlanta falcons",
        "question": "qui\u00e9n es el jugador m\u00e1s alto de los atlanta falcons",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wie hei\u00dft der gr\u00f6\u00dfte spieler der atlanta falcons\nAMR: (h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the tallest player of the atlanta falcons",
        "question": "wie hei\u00dft der gr\u00f6\u00dfte spieler der atlanta falcons",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0438\u0433\u0440\u043e\u043a atlanta falcons\nAMR: (h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the tallest player of the atlanta falcons",
        "question": "\u043a\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0438\u0433\u0440\u043e\u043a atlanta falcons",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le joueur le plus grand en taille chez les atlanta falcons \nAMR: (h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the tallest player of the atlanta falcons",
        "question": "qui est le joueur le plus grand en taille chez les atlanta falcons ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas yra auk\u0161\u010diausias atlantos \u201efalcons\u201c \u017eaid\u0117jas\nAMR: (h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the tallest player of the atlanta falcons",
        "question": "kas yra auk\u0161\u010diausias atlantos \u201efalcons\u201c \u017eaid\u0117jas",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the top10 action roleplaying video games according to ign\nAMR: (g / game :quant 10 :mod (v / video) :mod (p / play-02 :ARG1 (r / role)) :mod (t / top) :domain (a / amr-unknown) :ARG1-of (s / say-01 :ARG0 (p2 / publication :name (n / name :op1 \"IGN\"))) :mod (a2 / act-02))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the top10 action roleplaying video games according to ign",
        "question": "what are the top10 action roleplaying video games according to ign",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "cu\u00e1les son los 10 mejores videojuegos de rol de acci\u00f3n seg\u00fan ign\nAMR: (g / game :quant 10 :mod (v / video) :mod (p / play-02 :ARG1 (r / role)) :mod (t / top) :domain (a / amr-unknown) :ARG1-of (s / say-01 :ARG0 (p2 / publication :name (n / name :op1 \"IGN\"))) :mod (a2 / act-02))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the top10 action roleplaying video games according to ign",
        "question": "cu\u00e1les son los 10 mejores videojuegos de rol de acci\u00f3n seg\u00fan ign",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welches sind laut ign die 10 besten aktionrollenspiele f\u00fcr den pc\nAMR: (g / game :quant 10 :mod (v / video) :mod (p / play-02 :ARG1 (r / role)) :mod (t / top) :domain (a / amr-unknown) :ARG1-of (s / say-01 :ARG0 (p2 / publication :name (n / name :op1 \"IGN\"))) :mod (a2 / act-02))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the top10 action roleplaying video games according to ign",
        "question": "welches sind laut ign die 10 besten aktionrollenspiele f\u00fcr den pc",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0440\u043e\u043b\u0435\u0432\u044b\u0435 \u0438\u0433\u0440\u044b \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 \u0442\u043e\u043f10 \u043f\u043e \u0432\u0435\u0440\u0441\u0438\u0438 ign\nAMR: (g / game :quant 10 :mod (v / video) :mod (p / play-02 :ARG1 (r / role)) :mod (t / top) :domain (a / amr-unknown) :ARG1-of (s / say-01 :ARG0 (p2 / publication :name (n / name :op1 \"IGN\"))) :mod (a2 / act-02))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the top10 action roleplaying video games according to ign",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0440\u043e\u043b\u0435\u0432\u044b\u0435 \u0438\u0433\u0440\u044b \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 \u0442\u043e\u043f10 \u043f\u043e \u0432\u0435\u0440\u0441\u0438\u0438 ign",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le joueur le plus grand en taille chez les atlanta falcons \nAMR: (g / game :quant 10 :mod (v / video) :mod (p / play-02 :ARG1 (r / role)) :mod (t / top) :domain (a / amr-unknown) :ARG1-of (s / say-01 :ARG0 (p2 / publication :name (n / name :op1 \"IGN\"))) :mod (a2 / act-02))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the top10 action roleplaying video games according to ign",
        "question": "qui est le joueur le plus grand en taille chez les atlanta falcons ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurie \u017eaidimai patenka \u012f 10 geriausi\u0173 veiksmo rpg pagal ign\nAMR: (g / game :quant 10 :mod (v / video) :mod (p / play-02 :ARG1 (r / role)) :mod (t / top) :domain (a / amr-unknown) :ARG1-of (s / say-01 :ARG0 (p2 / publication :name (n / name :op1 \"IGN\"))) :mod (a2 / act-02))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://purl.org/dc/terms/subject> <http://dbpedia.org/resource/Category:Action_role-playing_video_games> ; <http://dbpedia.org/property/ign> ?score } ORDER BY DESC(?score) LIMIT 10",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the top10 action roleplaying video games according to ign",
        "question": "kurie \u017eaidimai patenka \u012f 10 geriausi\u0173 veiksmo rpg pagal ign",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all writers that won the nobel prize in literature\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (w / write-01) :ARG0-of (w2 / win-01 :ARG1 (a / award :name (n / name :op1 \"Nobel\" :op2 \"Prize\" :op3 \"in\" :op4 \"literature\"))) :mod (a2 / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all writers that won the nobel prize in literature",
        "question": "give me all writers that won the nobel prize in literature",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 escritores ganaron el premio nobel de literatura\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (w / write-01) :ARG0-of (w2 / win-01 :ARG1 (a / award :name (n / name :op1 \"Nobel\" :op2 \"Prize\" :op3 \"in\" :op4 \"literature\"))) :mod (a2 / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all writers that won the nobel prize in literature",
        "question": "qu\u00e9 escritores ganaron el premio nobel de literatura",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle schriftsteller auf die den nobelpreis gewonnen haben\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (w / write-01) :ARG0-of (w2 / win-01 :ARG1 (a / award :name (n / name :op1 \"Nobel\" :op2 \"Prize\" :op3 \"in\" :op4 \"literature\"))) :mod (a2 / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all writers that won the nobel prize in literature",
        "question": "liste alle schriftsteller auf die den nobelpreis gewonnen haben",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u043f\u0438\u0441\u0430\u0442\u0435\u043b\u0435\u0439 \u0432\u044b\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445 \u043d\u043e\u0431\u0435\u043b\u0435\u0432\u0441\u043a\u0443\u044e \u043f\u0440\u0435\u043c\u0438\u044e \u043f\u043e \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0435\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (w / write-01) :ARG0-of (w2 / win-01 :ARG1 (a / award :name (n / name :op1 \"Nobel\" :op2 \"Prize\" :op3 \"in\" :op4 \"literature\"))) :mod (a2 / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all writers that won the nobel prize in literature",
        "question": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u043f\u0438\u0441\u0430\u0442\u0435\u043b\u0435\u0439 \u0432\u044b\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445 \u043d\u043e\u0431\u0435\u043b\u0435\u0432\u0441\u043a\u0443\u044e \u043f\u0440\u0435\u043c\u0438\u044e \u043f\u043e \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0435",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels sont tous les \u00e9crivains prix nobel de litt\u00e9rature \nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (w / write-01) :ARG0-of (w2 / win-01 :ARG1 (a / award :name (n / name :op1 \"Nobel\" :op2 \"Prize\" :op3 \"in\" :op4 \"literature\"))) :mod (a2 / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all writers that won the nobel prize in literature",
        "question": "quels sont tous les \u00e9crivains prix nobel de litt\u00e9rature ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardink visus ra\u0161ytojus laim\u0117jusius nobelio literat\u016bros premij\u0105\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (w / write-01) :ARG0-of (w2 / win-01 :ARG1 (a / award :name (n / name :op1 \"Nobel\" :op2 \"Prize\" :op3 \"in\" :op4 \"literature\"))) :mod (a2 / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all writers that won the nobel prize in literature",
        "question": "i\u0161vardink visus ra\u0161ytojus laim\u0117jusius nobelio literat\u016bros premij\u0105",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "show me all basketball players that are higher than 2 meters\nAMR: (s / show-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (p2 / play-01 :ARG1 (b / basketball)) :ARG1-of (h / have-degree-91 :ARG2 (h2 / high-02 :ARG1 p) :ARG3 (m / more-than :op1 (d / distance-quantity :quant 2 :unit (m2 / meter)))) :mod (a / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all basketball players that are higher than 2 meters",
        "question": "show me all basketball players that are higher than 2 meters",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "mu\u00e9strame todos los jugadores de baloncesto que miden m\u00e1s de 2 metros de altura\nAMR: (s / show-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (p2 / play-01 :ARG1 (b / basketball)) :ARG1-of (h / have-degree-91 :ARG2 (h2 / high-02 :ARG1 p) :ARG3 (m / more-than :op1 (d / distance-quantity :quant 2 :unit (m2 / meter)))) :mod (a / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all basketball players that are higher than 2 meters",
        "question": "mu\u00e9strame todos los jugadores de baloncesto que miden m\u00e1s de 2 metros de altura",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle basketballspieler auf die gr\u00f6\u00dfer als 2 meter sind\nAMR: (s / show-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (p2 / play-01 :ARG1 (b / basketball)) :ARG1-of (h / have-degree-91 :ARG2 (h2 / high-02 :ARG1 p) :ARG3 (m / more-than :op1 (d / distance-quantity :quant 2 :unit (m2 / meter)))) :mod (a / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all basketball players that are higher than 2 meters",
        "question": "liste alle basketballspieler auf die gr\u00f6\u00dfer als 2 meter sind",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u043c\u043d\u0435 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0441 \u0431\u0430\u0441\u043a\u0435\u0442\u0431\u043e\u043b \u0432\u044b\u0448\u0435 2 \u043c\u0435\u0442\u0440\u043e\u0432\nAMR: (s / show-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (p2 / play-01 :ARG1 (b / basketball)) :ARG1-of (h / have-degree-91 :ARG2 (h2 / high-02 :ARG1 p) :ARG3 (m / more-than :op1 (d / distance-quantity :quant 2 :unit (m2 / meter)))) :mod (a / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all basketball players that are higher than 2 meters",
        "question": "\u043f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u043c\u043d\u0435 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0441 \u0431\u0430\u0441\u043a\u0435\u0442\u0431\u043e\u043b \u0432\u044b\u0448\u0435 2 \u043c\u0435\u0442\u0440\u043e\u0432",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "montrezmoi tous les joueurs de basketball qui font plus de 2 m\u00e8tres\nAMR: (s / show-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (p2 / play-01 :ARG1 (b / basketball)) :ARG1-of (h / have-degree-91 :ARG2 (h2 / high-02 :ARG1 p) :ARG3 (m / more-than :op1 (d / distance-quantity :quant 2 :unit (m2 / meter)))) :mod (a / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all basketball players that are higher than 2 meters",
        "question": "montrezmoi tous les joueurs de basketball qui font plus de 2 m\u00e8tres",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "parodyk man visus krep\u0161ininkus vir\u0161 dviej\u0173 metr\u0173\nAMR: (s / show-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (p2 / play-01 :ARG1 (b / basketball)) :ARG1-of (h / have-degree-91 :ARG2 (h2 / high-02 :ARG1 p) :ARG3 (m / more-than :op1 (d / distance-quantity :quant 2 :unit (m2 / meter)))) :mod (a / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/height> ?n FILTER ( ?n > 2.0 ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "show me all basketball players that are higher than 2 meters",
        "question": "parodyk man visus krep\u0161ininkus vir\u0161 dviej\u0173 metr\u0173",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "when was the statue of liberty built\nAMR: (b / build-01 :ARG1 (w / work-of-art :name (n / name :op1 \"Statue\" :op2 \"of\" :op3 \"Liberty\")) :time (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "when was the statue of liberty built",
        "question": "when was the statue of liberty built",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "cu\u00e1ndo fue construida la estatua de la libertad\nAMR: (b / build-01 :ARG1 (w / work-of-art :name (n / name :op1 \"Statue\" :op2 \"of\" :op3 \"Liberty\")) :time (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "when was the statue of liberty built",
        "question": "cu\u00e1ndo fue construida la estatua de la libertad",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wann wurde die freiheitsstatue erbaut\nAMR: (b / build-01 :ARG1 (w / work-of-art :name (n / name :op1 \"Statue\" :op2 \"of\" :op3 \"Liberty\")) :time (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "when was the statue of liberty built",
        "question": "wann wurde die freiheitsstatue erbaut",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u043e\u0433\u0434\u0430 \u0431\u044b\u043b\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u0441\u0442\u0430\u0442\u0443\u044f \u0441\u0432\u043e\u0431\u043e\u0434\u044b\nAMR: (b / build-01 :ARG1 (w / work-of-art :name (n / name :op1 \"Statue\" :op2 \"of\" :op3 \"Liberty\")) :time (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "when was the statue of liberty built",
        "question": "\u043a\u043e\u0433\u0434\u0430 \u0431\u044b\u043b\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u0441\u0442\u0430\u0442\u0443\u044f \u0441\u0432\u043e\u0431\u043e\u0434\u044b",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quand la statue de la lib\u00e9rt\u00e9 atelle \u00e9t\u00e9 \u00e9difi\u00e9e \nAMR: (b / build-01 :ARG1 (w / work-of-art :name (n / name :op1 \"Statue\" :op2 \"of\" :op3 \"Liberty\")) :time (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "when was the statue of liberty built",
        "question": "quand la statue de la lib\u00e9rt\u00e9 atelle \u00e9t\u00e9 \u00e9difi\u00e9e ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kada buvo pastatyta laisv\u0117s statula\nAMR: (b / build-01 :ARG1 (w / work-of-art :name (n / name :op1 \"Statue\" :op2 \"of\" :op3 \"Liberty\")) :time (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Statue_of_Liberty> <http://dbpedia.org/property/beginningDate> ?date }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "when was the statue of liberty built",
        "question": "kada buvo pastatyta laisv\u0117s statula",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which states border illinois\nAMR: (b / border-01 :ARG1 (s2 / state :mod (a / amr-unknown)) :ARG2 (s / state :name (n / name :op1 \"Illinois\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which states border illinois",
        "question": "which states border illinois",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 estados tienen frontera con illinois\nAMR: (b / border-01 :ARG1 (s2 / state :mod (a / amr-unknown)) :ARG2 (s / state :name (n / name :op1 \"Illinois\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which states border illinois",
        "question": "qu\u00e9 estados tienen frontera con illinois",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche staaten grenzen an illinois\nAMR: (b / border-01 :ARG1 (s2 / state :mod (a / amr-unknown)) :ARG2 (s / state :name (n / name :op1 \"Illinois\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which states border illinois",
        "question": "welche staaten grenzen an illinois",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0448\u0442\u0430\u0442\u044b \u0433\u0440\u0430\u043d\u0438\u0447\u0430\u0442 \u0441 \u0438\u043b\u043b\u0438\u043d\u043e\u0439\u0441\u043e\u043c\nAMR: (b / border-01 :ARG1 (s2 / state :mod (a / amr-unknown)) :ARG2 (s / state :name (n / name :op1 \"Illinois\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which states border illinois",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0448\u0442\u0430\u0442\u044b \u0433\u0440\u0430\u043d\u0438\u0447\u0430\u0442 \u0441 \u0438\u043b\u043b\u0438\u043d\u043e\u0439\u0441\u043e\u043c",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels \u00e9tats bordent lillinois \nAMR: (b / border-01 :ARG1 (s2 / state :mod (a / amr-unknown)) :ARG2 (s / state :name (n / name :op1 \"Illinois\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which states border illinois",
        "question": "quels \u00e9tats bordent lillinois ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "su kokiomis valstijomis ribojasi ilinojus\nAMR: (b / border-01 :ARG1 (s2 / state :mod (a / amr-unknown)) :ARG2 (s / state :name (n / name :op1 \"Illinois\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Illinois> <http://dbpedia.org/property/borderingstates> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which states border illinois",
        "question": "su kokiomis valstijomis ribojasi ilinojus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed minecraft\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Minecraft\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed minecraft",
        "question": "who developed minecraft",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n desarroll\u00f3 minecraft\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Minecraft\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed minecraft",
        "question": "qui\u00e9n desarroll\u00f3 minecraft",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer entwickelte minecraft\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Minecraft\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed minecraft",
        "question": "wer entwickelte minecraft",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u0438\u0433\u0440\u0443 \u043c\u0430\u0439\u043d\u043a\u0440\u0430\u0444\u0442\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Minecraft\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed minecraft",
        "question": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u0438\u0433\u0440\u0443 \u043c\u0430\u0439\u043d\u043a\u0440\u0430\u0444\u0442",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui a d\u00e9velopp\u00e9 minecraft \nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Minecraft\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed minecraft",
        "question": "qui a d\u00e9velopp\u00e9 minecraft ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas suk\u016br\u0117 minecraft\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Minecraft\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Minecraft> <http://dbpedia.org/ontology/developer> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed minecraft",
        "question": "kas suk\u016br\u0117 minecraft",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "where did hillel slovak die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Hillel\" :op2 \"Slovak\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did hillel slovak die",
        "question": "where did hillel slovak die",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "d\u00f3nde muri\u00f3 hillel slovak\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Hillel\" :op2 \"Slovak\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did hillel slovak die",
        "question": "d\u00f3nde muri\u00f3 hillel slovak",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wo ist hillel slovak gestorben\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Hillel\" :op2 \"Slovak\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did hillel slovak die",
        "question": "wo ist hillel slovak gestorben",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0433\u0434\u0435 \u0443\u043c\u0435\u0440 \u0433\u0438\u043b\u0435\u043b\u044c \u0441\u043b\u043e\u0432\u0430\u043a\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Hillel\" :op2 \"Slovak\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did hillel slovak die",
        "question": "\u0433\u0434\u0435 \u0443\u043c\u0435\u0440 \u0433\u0438\u043b\u0435\u043b\u044c \u0441\u043b\u043e\u0432\u0430\u043a",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "o\u00f9 est mort hillel slovak \nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Hillel\" :op2 \"Slovak\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did hillel slovak die",
        "question": "o\u00f9 est mort hillel slovak ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kur mir\u0117 hillelis slovakas\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Hillel\" :op2 \"Slovak\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hillel_Slovak> <http://dbpedia.org/ontology/deathPlace> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did hillel slovak die",
        "question": "kur mir\u0117 hillelis slovakas",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what movies does jesse eisenberg play in\nAMR: (p / play-02 :ARG0 (p2 / person :name (n / name :op1 \"Jesse\" :op2 \"Eisenberg\")) :location (m / movie :mod (a / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what movies does jesse eisenberg play in",
        "question": "what movies does jesse eisenberg play in",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en qu\u00e9 pel\u00edculas act\u00faa jesse eisenberg\nAMR: (p / play-02 :ARG0 (p2 / person :name (n / name :op1 \"Jesse\" :op2 \"Eisenberg\")) :location (m / movie :mod (a / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what movies does jesse eisenberg play in",
        "question": "en qu\u00e9 pel\u00edculas act\u00faa jesse eisenberg",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welchen filmen spielt jesse eisenberg mit\nAMR: (p / play-02 :ARG0 (p2 / person :name (n / name :op1 \"Jesse\" :op2 \"Eisenberg\")) :location (m / movie :mod (a / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what movies does jesse eisenberg play in",
        "question": "in welchen filmen spielt jesse eisenberg mit",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0437 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0438\u0433\u0440\u0430\u0435\u0442 \u0434\u0436\u0435\u0441\u0441\u0438 \u0430\u0439\u0437\u0435\u043d\u0431\u0435\u0440\u0433\nAMR: (p / play-02 :ARG0 (p2 / person :name (n / name :op1 \"Jesse\" :op2 \"Eisenberg\")) :location (m / movie :mod (a / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what movies does jesse eisenberg play in",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0437 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0438\u0433\u0440\u0430\u0435\u0442 \u0434\u0436\u0435\u0441\u0441\u0438 \u0430\u0439\u0437\u0435\u043d\u0431\u0435\u0440\u0433",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dans quels films joue jesse eisenberg \nAMR: (p / play-02 :ARG0 (p2 / person :name (n / name :op1 \"Jesse\" :op2 \"Eisenberg\")) :location (m / movie :mod (a / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what movies does jesse eisenberg play in",
        "question": "dans quels films joue jesse eisenberg ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokiuose filmuose vaidino jesse eisenberg\nAMR: (p / play-02 :ARG0 (p2 / person :name (n / name :op1 \"Jesse\" :op2 \"Eisenberg\")) :location (m / movie :mod (a / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jesse_Eisenberg> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what movies does jesse eisenberg play in",
        "question": "kokiuose filmuose vaidino jesse eisenberg",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give all swimmers that were born in moscow\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (s / swim-01) :ARG1-of (b / bear-02 :location (c / city :name (n / name :op1 \"Moscow\"))) :mod (a / all)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give all swimmers that were born in moscow",
        "question": "give all swimmers that were born in moscow",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame todos los nadadores nacidos en mosc\u00fa\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (s / swim-01) :ARG1-of (b / bear-02 :location (c / city :name (n / name :op1 \"Moscow\"))) :mod (a / all)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give all swimmers that were born in moscow",
        "question": "dame todos los nadadores nacidos en mosc\u00fa",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle schwimmer auf die in moskau geboren wurden\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (s / swim-01) :ARG1-of (b / bear-02 :location (c / city :name (n / name :op1 \"Moscow\"))) :mod (a / all)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give all swimmers that were born in moscow",
        "question": "liste alle schwimmer auf die in moskau geboren wurden",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u043f\u043b\u043e\u0432\u0446\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0440\u043e\u0436\u0434\u0435\u043d\u044b \u0432 \u043c\u043e\u0441\u043a\u0432\u0435\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (s / swim-01) :ARG1-of (b / bear-02 :location (c / city :name (n / name :op1 \"Moscow\"))) :mod (a / all)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give all swimmers that were born in moscow",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u043f\u043b\u043e\u0432\u0446\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0440\u043e\u0436\u0434\u0435\u043d\u044b \u0432 \u043c\u043e\u0441\u043a\u0432\u0435",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi tous les nageurs n\u00e9s \u00e0 moscou\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (s / swim-01) :ARG1-of (b / bear-02 :location (c / city :name (n / name :op1 \"Moscow\"))) :mod (a / all)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give all swimmers that were born in moscow",
        "question": "donnezmoi tous les nageurs n\u00e9s \u00e0 moscou",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "pasakyk man visus plaukikus gimusius maskvoje\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (s / swim-01) :ARG1-of (b / bear-02 :location (c / city :name (n / name :op1 \"Moscow\"))) :mod (a / all)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Swimmer> ; <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Moscow> }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give all swimmers that were born in moscow",
        "question": "pasakyk man visus plaukikus gimusius maskvoje",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all cosmonauts\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (c / cosmonaut :mod (a / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all cosmonauts",
        "question": "give me all cosmonauts",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame todos los cosmonautas\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (c / cosmonaut :mod (a / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all cosmonauts",
        "question": "dame todos los cosmonautas",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "gib mir alle astronauten\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (c / cosmonaut :mod (a / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all cosmonauts",
        "question": "gib mir alle astronauten",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u0441\u043c\u043e\u043d\u0430\u0432\u0442\u043e\u0432\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (c / cosmonaut :mod (a / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all cosmonauts",
        "question": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u0441\u043c\u043e\u043d\u0430\u0432\u0442\u043e\u0432",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnemoi tous les astronautes\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (c / cosmonaut :mod (a / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all cosmonauts",
        "question": "donnemoi tous les astronautes",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardykite visus astronautus\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (c / cosmonaut :mod (a / all)) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Astronaut> { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Russia> } UNION { ?uri <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Soviet_Union> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all cosmonauts",
        "question": "i\u0161vardykite visus astronautus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all swiss nonprofit organizations\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (o / organization :ARG0-of (p / profit-01 :polarity -) :mod (a / all) :mod (c / country :name (n / name :op1 \"Switzerland\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all swiss nonprofit organizations",
        "question": "give me all swiss nonprofit organizations",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame todas las organizaciones suizas sin fines de lucro\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (o / organization :ARG0-of (p / profit-01 :polarity -) :mod (a / all) :mod (c / country :name (n / name :op1 \"Switzerland\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all swiss nonprofit organizations",
        "question": "dame todas las organizaciones suizas sin fines de lucro",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle schweizer ngos auf\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (o / organization :ARG0-of (p / profit-01 :polarity -) :mod (a / all) :mod (c / country :name (n / name :op1 \"Switzerland\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all swiss nonprofit organizations",
        "question": "liste alle schweizer ngos auf",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be a valid DBPedia property or relation!"
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435 \u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u043a\u0438\u0435 \u043d\u0435\u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (o / organization :ARG0-of (p / profit-01 :polarity -) :mod (a / all) :mod (c / country :name (n / name :op1 \"Switzerland\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Nonprofit_organization> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Switzerland> } UNION { ?uri <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Switzerland> } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all swiss nonprofit organizations",
        "question": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435 \u0448\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u043a\u0438\u0435 \u043d\u0435\u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "list all boardgames by gmt",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 1,
        "rel_excluded": "publisher",
        "en_question": "list all boardgames by gmt",
        "question": "list all boardgames by gmt",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 juegos de mesa fueron hechos por gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "qu\u00e9 juegos de mesa fueron hechos por gmt",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 1,
        "rel_excluded": "publisher",
        "en_question": "list all boardgames by gmt",
        "question": "qu\u00e9 juegos de mesa fueron hechos por gmt",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "zeige mir alle brettspiele von gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "zeige mir alle brettspiele von gmt",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 1,
        "rel_excluded": "publisher",
        "en_question": "list all boardgames by gmt",
        "question": "zeige mir alle brettspiele von gmt",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0438\u0433\u0440\u044b gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0438\u0433\u0440\u044b gmt",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 1,
        "rel_excluded": "publisher",
        "en_question": "list all boardgames by gmt",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0438\u0433\u0440\u044b gmt",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "listez tous les jeux de soci\u00e9t\u00e9 de gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "listez tous les jeux de soci\u00e9t\u00e9 de gmt",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 1,
        "rel_excluded": "publisher",
        "en_question": "list all boardgames by gmt",
        "question": "listez tous les jeux de soci\u00e9t\u00e9 de gmt",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardykite visus gmt \u017eaidimus\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "i\u0161vardykite visus gmt \u017eaidimus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 1,
        "rel_excluded": "publisher",
        "en_question": "list all boardgames by gmt",
        "question": "i\u0161vardykite visus gmt \u017eaidimus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "who developed skype",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 1,
        "rel_excluded": "developer",
        "en_question": "who developed skype",
        "question": "who developed skype",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n desarroll\u00f3 skype\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "qui\u00e9n desarroll\u00f3 skype",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 1,
        "rel_excluded": "developer",
        "en_question": "who developed skype",
        "question": "qui\u00e9n desarroll\u00f3 skype",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer hat skype entwickelt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "wer hat skype entwickelt",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 1,
        "rel_excluded": "developer",
        "en_question": "who developed skype",
        "question": "wer hat skype entwickelt",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b skype\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b skype",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 1,
        "rel_excluded": "developer",
        "en_question": "who developed skype",
        "question": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b skype",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui a d\u00e9velopp\u00e9 skype \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "qui a d\u00e9velopp\u00e9 skype ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 1,
        "rel_excluded": "developer",
        "en_question": "who developed skype",
        "question": "qui a d\u00e9velopp\u00e9 skype ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas suk\u016br\u0117 \u201eskype\u201c\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "kas suk\u016br\u0117 \u201eskype\u201c",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 1,
        "rel_excluded": "developer",
        "en_question": "who developed skype",
        "question": "kas suk\u016br\u0117 \u201eskype\u201c",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "which people were born in heraklion",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 1,
        "rel_excluded": "person",
        "en_question": "which people were born in heraklion",
        "question": "which people were born in heraklion",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 personas nacieron en heraklion\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "qu\u00e9 personas nacieron en heraklion",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 1,
        "rel_excluded": "birthPlace",
        "en_question": "which people were born in heraklion",
        "question": "qu\u00e9 personas nacieron en heraklion",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche menschen wurden in heraklion geboren\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "welche menschen wurden in heraklion geboren",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 1,
        "rel_excluded": "birthPlace",
        "en_question": "which people were born in heraklion",
        "question": "welche menschen wurden in heraklion geboren",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043b\u044e\u0434\u0438 \u0440\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u0432 \u0438\u0440\u0430\u043a\u043b\u0438\u043e\u043d\u0435\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043b\u044e\u0434\u0438 \u0440\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u0432 \u0438\u0440\u0430\u043a\u043b\u0438\u043e\u043d\u0435",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 1,
        "rel_excluded": "person",
        "en_question": "which people were born in heraklion",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043b\u044e\u0434\u0438 \u0440\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u0432 \u0438\u0440\u0430\u043a\u043b\u0438\u043e\u043d\u0435",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est n\u00e9 \u00e0 heraklion \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "qui est n\u00e9 \u00e0 heraklion ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 1,
        "rel_excluded": "birthPlace",
        "en_question": "which people were born in heraklion",
        "question": "qui est n\u00e9 \u00e0 heraklion ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas gim\u0117 heraklione\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "kas gim\u0117 heraklione",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 1,
        "rel_excluded": "person",
        "en_question": "which people were born in heraklion",
        "question": "kas gim\u0117 heraklione",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "in which us state is area 51 located",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 1,
        "rel_excluded": "location",
        "en_question": "in which us state is area 51 located",
        "question": "in which us state is area 51 located",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en cu\u00e1l estado de estados unidos esta situada el area 51\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "en cu\u00e1l estado de estados unidos esta situada el area 51",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 1,
        "rel_excluded": "country",
        "en_question": "in which us state is area 51 located",
        "question": "en cu\u00e1l estado de estados unidos esta situada el area 51",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welchem us bundesstaat liegt area 51\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "in welchem us bundesstaat liegt area 51",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 1,
        "rel_excluded": "location",
        "en_question": "in which us state is area 51 located",
        "question": "in welchem us bundesstaat liegt area 51",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u043e\u043c \u0448\u0442\u0430\u0442\u0435 \u0441\u0448\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u043e\u043d\u0430 51\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "\u0432 \u043a\u0430\u043a\u043e\u043c \u0448\u0442\u0430\u0442\u0435 \u0441\u0448\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u043e\u043d\u0430 51",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 1,
        "rel_excluded": "country",
        "en_question": "in which us state is area 51 located",
        "question": "\u0432 \u043a\u0430\u043a\u043e\u043c \u0448\u0442\u0430\u0442\u0435 \u0441\u0448\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u043e\u043d\u0430 51",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dans quel etat des etatsunis se situe larea 51 \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "dans quel etat des etatsunis se situe larea 51 ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 1,
        "rel_excluded": "location",
        "en_question": "in which us state is area 51 located",
        "question": "dans quel etat des etatsunis se situe larea 51 ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurioje jav valstijoje yra karin\u0117 baz\u0117 51 zona\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "kurioje jav valstijoje yra karin\u0117 baz\u0117 51 zona",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 1,
        "rel_excluded": "country",
        "en_question": "in which us state is area 51 located",
        "question": "kurioje jav valstijoje yra karin\u0117 baz\u0117 51 zona",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "who is the mayor of new york city",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 1,
        "rel_excluded": "leaderName",
        "en_question": "who is the mayor of new york city",
        "question": "who is the mayor of new york city",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n es el alcalde de la cuidad de nueva york\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "qui\u00e9n es el alcalde de la cuidad de nueva york",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 1,
        "rel_excluded": "leaderName",
        "en_question": "who is the mayor of new york city",
        "question": "qui\u00e9n es el alcalde de la cuidad de nueva york",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer ist der b\u00fcrgermeister von new york city\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "wer ist der b\u00fcrgermeister von new york city",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 1,
        "rel_excluded": "leaderName",
        "en_question": "who is the mayor of new york city",
        "question": "wer ist der b\u00fcrgermeister von new york city",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u043c\u0435\u0440 \u043d\u044c\u044e \u0439\u043e\u0440\u043a\u0430\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "\u043a\u0442\u043e \u043c\u0435\u0440 \u043d\u044c\u044e \u0439\u043e\u0440\u043a\u0430",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 1,
        "rel_excluded": "leaderName",
        "en_question": "who is the mayor of new york city",
        "question": "\u043a\u0442\u043e \u043c\u0435\u0440 \u043d\u044c\u044e \u0439\u043e\u0440\u043a\u0430",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le maire de la cit\u00e9 de new york \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "qui est le maire de la cit\u00e9 de new york ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 1,
        "rel_excluded": "leaderName",
        "en_question": "who is the mayor of new york city",
        "question": "qui est le maire de la cit\u00e9 de new york ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas yra niujorko meras\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "kas yra niujorko meras",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 1,
        "rel_excluded": "leaderName",
        "en_question": "who is the mayor of new york city",
        "question": "kas yra niujorko meras",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which countries have places with more than two caves\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "which countries have places with more than two caves",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 pa\u00edses tienen lugares con m\u00e1s de dos cuevas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "qu\u00e9 pa\u00edses tienen lugares con m\u00e1s de dos cuevas",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welche l\u00e4ndern gibt es mehr als 2 h\u00f6hlen\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "in welche l\u00e4ndern gibt es mehr als 2 h\u00f6hlen",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0435\u0441\u0442\u044c \u043c\u0435\u0441\u0442\u0430 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0449\u0435\u0440 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u0434\u0432\u0435\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0435\u0441\u0442\u044c \u043c\u0435\u0441\u0442\u0430 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0449\u0435\u0440 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u0434\u0432\u0435",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le maire de la cit\u00e9 de new york \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "qui est le maire de la cit\u00e9 de new york ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kuriose \u0161alyse yra viet\u0173 kuriose yra daugiau nei du urvai\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "kuriose \u0161alyse yra viet\u0173 kuriose yra daugiau nei du urvai",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "where did abraham lincoln die",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "d\u00f3nde muri\u00f3 abraham lincoln\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "d\u00f3nde muri\u00f3 abraham lincoln",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wo ist abraham lincoln gestorben\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "wo ist abraham lincoln gestorben",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u043e\u0433\u0434\u0430 \u0443\u043c\u0435\u0440 \u0430\u0431\u0440\u0430\u0445\u0430\u043c \u043b\u0438\u043d\u043a\u043e\u043b\u044c\u043d\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "\u043a\u043e\u0433\u0434\u0430 \u0443\u043c\u0435\u0440 \u0430\u0431\u0440\u0430\u0445\u0430\u043c \u043b\u0438\u043d\u043a\u043e\u043b\u044c\u043d",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "o\u00f9 est d\u00e9c\u00e9d\u00e9 abraham lincoln \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "o\u00f9 est d\u00e9c\u00e9d\u00e9 abraham lincoln ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kur mire abraomas linkolnas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "kur mire abraomas linkolnas",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "which airports does air china serve",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 1,
        "rel_excluded": "targetAirport",
        "en_question": "which airports does air china serve",
        "question": "which airports does air china serve",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en qu\u00e9 aeropuertos opera air china\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "en qu\u00e9 aeropuertos opera air china",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 1,
        "rel_excluded": "targetAirport",
        "en_question": "which airports does air china serve",
        "question": "en qu\u00e9 aeropuertos opera air china",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche flugh\u00e4fen bedient air china\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "welche flugh\u00e4fen bedient air china",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 1,
        "rel_excluded": "targetAirport",
        "en_question": "which airports does air china serve",
        "question": "welche flugh\u00e4fen bedient air china",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 air china\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 air china",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 1,
        "rel_excluded": "targetAirport",
        "en_question": "which airports does air china serve",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 air china",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels a\u00e9roports sont desservis par air china \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "quels a\u00e9roports sont desservis par air china ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 1,
        "rel_excluded": "targetAirport",
        "en_question": "which airports does air china serve",
        "question": "quels a\u00e9roports sont desservis par air china ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "oro uostai kuriuos aptarnauja \u201eair china\u201c\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "oro uostai kuriuos aptarnauja \u201eair china\u201c",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 1,
        "rel_excluded": "targetAirport",
        "en_question": "which airports does air china serve",
        "question": "oro uostai kuriuos aptarnauja \u201eair china\u201c",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "give me all actors starring in movies directed by and starring william shatner",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 1,
        "rel_excluded": "starring",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "give me all actors starring in movies directed by and starring william shatner",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 actores protagonizan pel\u00edculas dirigidas y protagonizadas por william shatner\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "qu\u00e9 actores protagonizan pel\u00edculas dirigidas y protagonizadas por william shatner",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 1,
        "rel_excluded": "starring",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "qu\u00e9 actores protagonizan pel\u00edculas dirigidas y protagonizadas por william shatner",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "gib mir alle schauspieler die in filmen gespielt haben in dem william shatner gespielt und gleichyeitig regie gef\u00fchrt hat\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "gib mir alle schauspieler die in filmen gespielt haben in dem william shatner gespielt und gleichyeitig regie gef\u00fchrt hat",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 1,
        "rel_excluded": "director",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "gib mir alle schauspieler die in filmen gespielt haben in dem william shatner gespielt und gleichyeitig regie gef\u00fchrt hat",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u043a\u0442\u0435\u0440\u043e\u0432 \u0441\u043d\u0438\u043c\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0440\u043e\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0443\u0438\u043b\u044c\u044f\u043c\u043e\u043c \u0448\u0435\u0442\u043d\u0435\u0440\u043e\u043c\u0432 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043c \u0441\u0430\u043c\u0438\u043c\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u043a\u0442\u0435\u0440\u043e\u0432 \u0441\u043d\u0438\u043c\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0440\u043e\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0443\u0438\u043b\u044c\u044f\u043c\u043e\u043c \u0448\u0435\u0442\u043d\u0435\u0440\u043e\u043c\u0432 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043c \u0441\u0430\u043c\u0438\u043c",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 1,
        "rel_excluded": "starring",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u043a\u0442\u0435\u0440\u043e\u0432 \u0441\u043d\u0438\u043c\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0440\u043e\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0443\u0438\u043b\u044c\u044f\u043c\u043e\u043c \u0448\u0435\u0442\u043d\u0435\u0440\u043e\u043c\u0432 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043c \u0441\u0430\u043c\u0438\u043c",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi tous les acteurs qui figurent dans les films r\u00e9alis\u00e9s par william shatner\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "donnezmoi tous les acteurs qui figurent dans les films r\u00e9alis\u00e9s par william shatner",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 1,
        "rel_excluded": "director",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "donnezmoi tous les acteurs qui figurent dans les films r\u00e9alis\u00e9s par william shatner",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokie aktoriai vaidino filmuose kuriuose re\u017eisierius ir aktorius buvo williamas shatneris\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "kokie aktoriai vaidino filmuose kuriuose re\u017eisierius ir aktorius buvo williamas shatneris",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 1,
        "rel_excluded": "director",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "kokie aktoriai vaidino filmuose kuriuose re\u017eisierius ir aktorius buvo williamas shatneris",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "what are the official languages of the philippines",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 1,
        "rel_excluded": "officialLanguage",
        "en_question": "what are the official languages of the philippines",
        "question": "what are the official languages of the philippines",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "cu\u00e1les son los idiomas oficiales de filipinas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "cu\u00e1les son los idiomas oficiales de filipinas",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 1,
        "rel_excluded": "officialLanguage",
        "en_question": "what are the official languages of the philippines",
        "question": "cu\u00e1les son los idiomas oficiales de filipinas",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "was ist die amtssprache auf den philippinen\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "was ist die amtssprache auf den philippinen",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 1,
        "rel_excluded": "officialLanguage",
        "en_question": "what are the official languages of the philippines",
        "question": "was ist die amtssprache auf den philippinen",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438 \u043d\u0430 \u0444\u0438\u043b\u043b\u0438\u043f\u0438\u043d\u0430\u0445\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438 \u043d\u0430 \u0444\u0438\u043b\u043b\u0438\u043f\u0438\u043d\u0430\u0445",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 1,
        "rel_excluded": "officialLanguage",
        "en_question": "what are the official languages of the philippines",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438 \u043d\u0430 \u0444\u0438\u043b\u043b\u0438\u043f\u0438\u043d\u0430\u0445",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels sont les langues officielles des philippines \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "quels sont les langues officielles des philippines ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 1,
        "rel_excluded": "officialLanguage",
        "en_question": "what are the official languages of the philippines",
        "question": "quels sont les langues officielles des philippines ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokios yra oficialios filipin\u0173 kalbos\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "kokios yra oficialios filipin\u0173 kalbos",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 1,
        "rel_excluded": "officialLanguage",
        "en_question": "what are the official languages of the philippines",
        "question": "kokios yra oficialios filipin\u0173 kalbos",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "give me all danish films",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 1,
        "rel_excluded": "country",
        "en_question": "give me all danish films",
        "question": "give me all danish films",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame todas las pel\u00edculas danesas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "dame todas las pel\u00edculas danesas",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 1,
        "rel_excluded": "country",
        "en_question": "give me all danish films",
        "question": "dame todas las pel\u00edculas danesas",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste als d\u00e4nischen filme auf\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "liste als d\u00e4nischen filme auf",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 1,
        "rel_excluded": "country",
        "en_question": "give me all danish films",
        "question": "liste als d\u00e4nischen filme auf",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0434\u0430\u0442\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u043c\u044b\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0434\u0430\u0442\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u043c\u044b",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 1,
        "rel_excluded": "film",
        "en_question": "give me all danish films",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0434\u0430\u0442\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u043c\u044b",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi tous les films danois\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "donnezmoi tous les films danois",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 1,
        "rel_excluded": "country",
        "en_question": "give me all danish films",
        "question": "donnezmoi tous les films danois",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u012fvardykite visus dan\u0173 filmus\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "\u012fvardykite visus dan\u0173 filmus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 1,
        "rel_excluded": "film",
        "en_question": "give me all danish films",
        "question": "\u012fvardykite visus dan\u0173 filmus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "which movies starring brad pitt were directed by guy ritchie",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 1,
        "rel_excluded": "starring",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "which movies starring brad pitt were directed by guy ritchie",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 pel\u00edculas protagonizadas por brad pitt han sido dirigidas por guy ritchie\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "qu\u00e9 pel\u00edculas protagonizadas por brad pitt han sido dirigidas por guy ritchie",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 1,
        "rel_excluded": "director",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "qu\u00e9 pel\u00edculas protagonizadas por brad pitt han sido dirigidas por guy ritchie",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste brad pitt filme auf in denen guy ritchie regie gef\u00fchrt hat\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "liste brad pitt filme auf in denen guy ritchie regie gef\u00fchrt hat",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 1,
        "rel_excluded": "film",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "liste brad pitt filme auf in denen guy ritchie regie gef\u00fchrt hat",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0433\u0430\u0435\u043c \u0440\u0438\u0447\u0438\u0438 \u0441\u043d\u0438\u043c\u0430\u043b\u0441\u044f \u0431\u0440\u044d\u0434 \u043f\u0438\u0442\u0442\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0433\u0430\u0435\u043c \u0440\u0438\u0447\u0438\u0438 \u0441\u043d\u0438\u043c\u0430\u043b\u0441\u044f \u0431\u0440\u044d\u0434 \u043f\u0438\u0442\u0442",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 1,
        "rel_excluded": "director",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0433\u0430\u0435\u043c \u0440\u0438\u0447\u0438\u0438 \u0441\u043d\u0438\u043c\u0430\u043b\u0441\u044f \u0431\u0440\u044d\u0434 \u043f\u0438\u0442\u0442",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels films avec brad pitt sont r\u00e9alis\u00e9s par guy ritchie \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "quels films avec brad pitt sont r\u00e9alis\u00e9s par guy ritchie ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 1,
        "rel_excluded": "starring",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "quels films avec brad pitt sont r\u00e9alis\u00e9s par guy ritchie ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokius filmus su bradu pittu re\u017eisavo guy ritchie\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "kokius filmus su bradu pittu re\u017eisavo guy ritchie",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 1,
        "rel_excluded": "starring",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "kokius filmus su bradu pittu re\u017eisavo guy ritchie",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "give me the grandchildren of bruce lee",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 1,
        "rel_excluded": "child",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "give me the grandchildren of bruce lee",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9nes son los nietos de bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "qui\u00e9nes son los nietos de bruce lee",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 1,
        "rel_excluded": "child",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "qui\u00e9nes son los nietos de bruce lee",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "zeige die enkelkinder von bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "zeige die enkelkinder von bruce lee",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 1,
        "rel_excluded": "child",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "zeige die enkelkinder von bruce lee",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u043d\u0443\u043a\u043e\u0432 \u0431\u0440\u044e\u0441\u0430 \u043b\u0438\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u043d\u0443\u043a\u043e\u0432 \u0431\u0440\u044e\u0441\u0430 \u043b\u0438",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 1,
        "rel_excluded": "child",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u043d\u0443\u043a\u043e\u0432 \u0431\u0440\u044e\u0441\u0430 \u043b\u0438",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnemoi les petitsenfants de bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "donnemoi les petitsenfants de bruce lee",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 1,
        "rel_excluded": "child",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "donnemoi les petitsenfants de bruce lee",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "duok man bruceo lee an\u016bkus\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "duok man bruceo lee an\u016bkus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 1,
        "rel_excluded": "child",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "duok man bruceo lee an\u016bkus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "which other weapons did the designer of the uzi develop",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 1,
        "rel_excluded": "weapon",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "which other weapons did the designer of the uzi develop",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 otras armas desarroll\u00f3 el dise\u00f1ador de la uzi\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "qu\u00e9 otras armas desarroll\u00f3 el dise\u00f1ador de la uzi",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 1,
        "rel_excluded": "weapon",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "qu\u00e9 otras armas desarroll\u00f3 el dise\u00f1ador de la uzi",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche anderen waffen wurden vom designer der uzi entwickelt\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "welche anderen waffen wurden vom designer der uzi entwickelt",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 1,
        "rel_excluded": "designer",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "welche anderen waffen wurden vom designer der uzi entwickelt",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0438\u043d\u044b\u0435 \u043e\u0440\u0443\u0436\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0435\u043b \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c \u0443\u0437\u0438\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0438\u043d\u044b\u0435 \u043e\u0440\u0443\u0436\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0435\u043b \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c \u0443\u0437\u0438",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 1,
        "rel_excluded": "weapon",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0438\u043d\u044b\u0435 \u043e\u0440\u0443\u0436\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0435\u043b \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c \u0443\u0437\u0438",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quelles autres armes ont \u00e9t\u00e9 d\u00e9velopp\u00e9es par le cr\u00e9ateur du uzi \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "quelles autres armes ont \u00e9t\u00e9 d\u00e9velopp\u00e9es par le cr\u00e9ateur du uzi ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 1,
        "rel_excluded": "designer",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "quelles autres armes ont \u00e9t\u00e9 d\u00e9velopp\u00e9es par le cr\u00e9ateur du uzi ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokius kitus ginklus suk\u016br\u0117 uzi konstruktorius\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "kokius kitus ginklus suk\u016br\u0117 uzi konstruktorius",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 1,
        "rel_excluded": "weapon",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "kokius kitus ginklus suk\u016br\u0117 uzi konstruktorius",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "who is the owner of universal studios",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 1,
        "rel_excluded": "owner",
        "en_question": "who is the owner of universal studios",
        "question": "who is the owner of universal studios",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n es el due\u00f1o de universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "qui\u00e9n es el due\u00f1o de universal studios",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 1,
        "rel_excluded": "owner",
        "en_question": "who is the owner of universal studios",
        "question": "qui\u00e9n es el due\u00f1o de universal studios",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wem geh\u00f6ren die universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "wem geh\u00f6ren die universal studios",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 1,
        "rel_excluded": "owner",
        "en_question": "who is the owner of universal studios",
        "question": "wem geh\u00f6ren die universal studios",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c universal studios",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 1,
        "rel_excluded": "owner",
        "en_question": "who is the owner of universal studios",
        "question": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c universal studios",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le propri\u00e9taire de universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "qui est le propri\u00e9taire de universal studios",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 1,
        "rel_excluded": "owner",
        "en_question": "who is the owner of universal studios",
        "question": "qui est le propri\u00e9taire de universal studios",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas yra \u201euniversal studios\u201c savininkas\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "kas yra \u201euniversal studios\u201c savininkas",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 1,
        "rel_excluded": "owner",
        "en_question": "who is the owner of universal studios",
        "question": "kas yra \u201euniversal studios\u201c savininkas",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which state of the usa has the highest population density\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "which state of the usa has the highest population density",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "cu\u00e1l estado de estados unidos tiene la mayor densidad poblacional\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "cu\u00e1l estado de estados unidos tiene la mayor densidad poblacional",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welcher staat in den usa hat die h\u00f6chste bev\u00f6lkerungsdichte\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "welcher staat in den usa hat die h\u00f6chste bev\u00f6lkerungsdichte",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u0448\u0442\u0430\u0442\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u0441\u0430\u043c\u0443\u044e \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0448\u0430\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "\u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u0448\u0442\u0430\u0442\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u0441\u0430\u043c\u0443\u044e \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0448\u0430",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quel \u00e9tat des \u00e9tats unis a la densit\u00e9 de population la plus \u00e9lev\u00e9e\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "quel \u00e9tat des \u00e9tats unis a la densit\u00e9 de population la plus \u00e9lev\u00e9e",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurioje jav valstijoje gyventoj\u0173 tankumas did\u017eiausias\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "kurioje jav valstijoje gyventoj\u0173 tankumas did\u017eiausias",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which monarchs were married to a german\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "which monarchs were married to a german",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 monarcas estaban casados con una persona alemana\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "qu\u00e9 monarcas estaban casados con una persona alemana",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche monarchen waren mit deutschen verheiratet\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "welche monarchen waren mit deutschen verheiratet",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0438\u0437 \u043c\u043e\u043d\u0430\u0440\u0445\u043e\u0432 \u0431\u044b\u043b \u0436\u0435\u043d\u0430\u0442 \u043d\u0430 \u043d\u0435\u043c\u043a\u0435\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "\u043a\u0442\u043e \u0438\u0437 \u043c\u043e\u043d\u0430\u0440\u0445\u043e\u0432 \u0431\u044b\u043b \u0436\u0435\u043d\u0430\u0442 \u043d\u0430 \u043d\u0435\u043c\u043a\u0435",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels monarques ont \u00e9t\u00e9 mari\u00e9s \u00e0 des allemands \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "quels monarques ont \u00e9t\u00e9 mari\u00e9s \u00e0 des allemands ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurie monarchai buvo ved\u0119 vokietes\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "kurie monarchai buvo ved\u0119 vokietes",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which organizations were founded in 1950\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "which organizations were founded in 1950",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 organizaciones fueron establecidas en 1950\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "qu\u00e9 organizaciones fueron establecidas en 1950",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche organisationen wurden 1950 gegr\u00fcndet\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "welche organisationen wurden 1950 gegr\u00fcndet",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u044b\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b \u0432 1950 \u0433\u043e\u0434\u0443\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u044b\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b \u0432 1950 \u0433\u043e\u0434\u0443",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quelles organisations ont \u00e9t\u00e9 fond\u00e9es en 1950 \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "quelles organisations ont \u00e9t\u00e9 fond\u00e9es en 1950 ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokios organizacijos buvo \u012fkurtos 1930 m\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "kokios organizacijos buvo \u012fkurtos 1930 m",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "who created the comic captain america",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 1,
        "rel_excluded": "creator",
        "en_question": "who created the comic captain america",
        "question": "who created the comic captain america",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n cre\u00f3 el comic capit\u00e1n am\u00e9rica\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "qui\u00e9n cre\u00f3 el comic capit\u00e1n am\u00e9rica",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 1,
        "rel_excluded": "creator",
        "en_question": "who created the comic captain america",
        "question": "qui\u00e9n cre\u00f3 el comic capit\u00e1n am\u00e9rica",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer ist der sch\u00f6pfer von captain america\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "wer ist der sch\u00f6pfer von captain america",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 1,
        "rel_excluded": "creator",
        "en_question": "who created the comic captain america",
        "question": "wer ist der sch\u00f6pfer von captain america",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u0440\u043e\u043c \u043a\u043e\u043c\u0438\u043a\u0441\u0430 \u043a\u0430\u043f\u0438\u0442\u0430\u043d \u0430\u043c\u0435\u0440\u0438\u043a\u0430\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u0440\u043e\u043c \u043a\u043e\u043c\u0438\u043a\u0441\u0430 \u043a\u0430\u043f\u0438\u0442\u0430\u043d \u0430\u043c\u0435\u0440\u0438\u043a\u0430",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 1,
        "rel_excluded": "creator",
        "en_question": "who created the comic captain america",
        "question": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u0440\u043e\u043c \u043a\u043e\u043c\u0438\u043a\u0441\u0430 \u043a\u0430\u043f\u0438\u0442\u0430\u043d \u0430\u043c\u0435\u0440\u0438\u043a\u0430",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui a cr\u00e9\u00e9 le comic captain america\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "qui a cr\u00e9\u00e9 le comic captain america",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 1,
        "rel_excluded": "creator",
        "en_question": "who created the comic captain america",
        "question": "qui a cr\u00e9\u00e9 le comic captain america",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas suk\u016br\u0117 kapitono amerikos komiks\u0105\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "kas suk\u016br\u0117 kapitono amerikos komiks\u0105",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 1,
        "rel_excluded": "creator",
        "en_question": "who created the comic captain america",
        "question": "kas suk\u016br\u0117 kapitono amerikos komiks\u0105",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the apollo 14 astronauts\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "give me the apollo 14 astronauts",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 astronautas participaron en la misi\u00f3n apolo 14\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "qu\u00e9 astronautas participaron en la misi\u00f3n apolo 14",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer war an bord der apollo 14\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "wer war an bord der apollo 14",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u044d\u043a\u0438\u043f\u0430\u0436 \u0430\u043f\u043e\u043b\u043b\u043e 14\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u044d\u043a\u0438\u043f\u0430\u0436 \u0430\u043f\u043e\u043b\u043b\u043e 14",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnemoi tous les astronautes dapollo 14\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "donnemoi tous les astronautes dapollo 14",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "pasakyk man apollo 14 astronaut\u0173 vardus\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "pasakyk man apollo 14 astronaut\u0173 vardus",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "who wrote the book the pillars of the earth",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 1,
        "rel_excluded": "author",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "who wrote the book the pillars of the earth",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n escribi\u00f3 el libro los pilares de la tierra\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "qui\u00e9n escribi\u00f3 el libro los pilares de la tierra",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 1,
        "rel_excluded": "author",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "qui\u00e9n escribi\u00f3 el libro los pilares de la tierra",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer hat das buch die s\u00e4ulen der welt geschrieben\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "wer hat das buch die s\u00e4ulen der welt geschrieben",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 1,
        "rel_excluded": "author",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "wer hat das buch die s\u00e4ulen der welt geschrieben",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0430\u0432\u0442\u043e\u0440 \u043a\u043d\u0438\u0433\u0438 \u0441\u0442\u043e\u043b\u043f\u044b \u0437\u0435\u043c\u043b\u0438\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "\u043a\u0442\u043e \u0430\u0432\u0442\u043e\u0440 \u043a\u043d\u0438\u0433\u0438 \u0441\u0442\u043e\u043b\u043f\u044b \u0437\u0435\u043c\u043b\u0438",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 1,
        "rel_excluded": "author",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "\u043a\u0442\u043e \u0430\u0432\u0442\u043e\u0440 \u043a\u043d\u0438\u0433\u0438 \u0441\u0442\u043e\u043b\u043f\u044b \u0437\u0435\u043c\u043b\u0438",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quelles f\u00eates sont c\u00e9l\u00e9br\u00e9es dans le monde entier\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "quelles f\u00eates sont c\u00e9l\u00e9br\u00e9es dans le monde entier",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 1,
        "rel_excluded": "author",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "quelles f\u00eates sont c\u00e9l\u00e9br\u00e9es dans le monde entier",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "ar neimaras \u017eaid\u0117 u\u017e real madrid \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "ar neimaras \u017eaid\u0117 u\u017e real madrid ",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 1,
        "rel_excluded": "author",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "ar neimaras \u017eaid\u0117 u\u017e real madrid ",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which state of the united states of america has the highest density\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "which state of the united states of america has the highest density",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 estado de los estados unidos de am\u00e9rica tiene la mayor densidad poblacional\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "qu\u00e9 estado de los estados unidos de am\u00e9rica tiene la mayor densidad poblacional",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welcher usbundesstaat hat die h\u00f6chste bev\u00f6lkerungsdichte\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "welcher usbundesstaat hat die h\u00f6chste bev\u00f6lkerungsdichte",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u043e\u0439 \u0448\u0442\u0430\u0442 \u0441\u0448\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "\u043a\u0430\u043a\u043e\u0439 \u0448\u0442\u0430\u0442 \u0441\u0448\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quel \u00e9tat des usa a la plus grande densit\u00e9 \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "quel \u00e9tat des usa a la plus grande densit\u00e9 ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurioje jungtini\u0173 amerikos valstij\u0173 valstijoje gyventoj\u0173 tankumas did\u017eiausias\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "kurioje jungtini\u0173 amerikos valstij\u0173 valstijoje gyventoj\u0173 tankumas did\u017eiausias",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which spaceflights were launched from baikonur\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "which spaceflights were launched from baikonur",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 misiones espaciales partieron desde baikonur\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "qu\u00e9 misiones espaciales partieron desde baikonur",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche raumfl\u00fcge starteten von baikonur aus\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "welche raumfl\u00fcge starteten von baikonur aus",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043a\u043e\u0441\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\u0438 \u0441 \u0431\u0430\u0439\u043a\u043e\u043d\u0443\u0440\u0430\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043a\u043e\u0441\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\u0438 \u0441 \u0431\u0430\u0439\u043a\u043e\u043d\u0443\u0440\u0430",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels vols spatiaux ont \u00e9t\u00e9 lanc\u00e9s depuis ba\u00efkonour \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "quels vols spatiaux ont \u00e9t\u00e9 lanc\u00e9s depuis ba\u00efkonour ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokie erdv\u0117laiviai buvo paleisti i\u0161 baikon\u016bro\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "kokie erdv\u0117laiviai buvo paleisti i\u0161 baikon\u016bro",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "give me a list of all trumpet players that were bandleaders",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 1,
        "rel_excluded": "instrument",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "give me a list of all trumpet players that were bandleaders",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame una lista de todos los trompeteros que fueron l\u00edderes de una banda\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "dame una lista de todos los trompeteros que fueron l\u00edderes de una banda",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 1,
        "rel_excluded": "occupation",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "dame una lista de todos los trompeteros que fueron l\u00edderes de una banda",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle trompetenspieler auf die bandleader einer band waren\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "liste alle trompetenspieler auf die bandleader einer band waren",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 1,
        "rel_excluded": "occupation",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "liste alle trompetenspieler auf die bandleader einer band waren",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0442\u0440\u0443\u0431\u0430\u0447\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043b\u0438\u0434\u0435\u0440\u0430\u043c\u0438 \u0433\u0440\u0443\u043f\u043f\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0442\u0440\u0443\u0431\u0430\u0447\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043b\u0438\u0434\u0435\u0440\u0430\u043c\u0438 \u0433\u0440\u0443\u043f\u043f",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 1,
        "rel_excluded": "occupation",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0442\u0440\u0443\u0431\u0430\u0447\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043b\u0438\u0434\u0435\u0440\u0430\u043c\u0438 \u0433\u0440\u0443\u043f\u043f",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi une liste de tous les joueurs de trempette qui sont chefs de groupe\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "donnezmoi une liste de tous les joueurs de trempette qui sont chefs de groupe",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 1,
        "rel_excluded": "occupation",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "donnezmoi une liste de tous les joueurs de trempette qui sont chefs de groupe",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardykite visus trimitus kurie buvo orkestro dirigentai\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "i\u0161vardykite visus trimitus kurie buvo orkestro dirigentai",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 1,
        "rel_excluded": "occupation",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "i\u0161vardykite visus trimitus kurie buvo orkestro dirigentai",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which us states are in the same timezone as utah\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "which us states are in the same timezone as utah",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 estados de eeuu se encuentran en la misma zona horaria que utah\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "qu\u00e9 estados de eeuu se encuentran en la misma zona horaria que utah",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche usstaaten liegen in der gleichen zeitzone wie utah\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "welche usstaaten liegen in der gleichen zeitzone wie utah",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0448\u0442\u0430\u0442\u044b \u0441\u0448\u0430 \u0432 \u0442\u043e\u043c \u0436\u0435 \u0447\u0430\u0441\u043e\u0432\u043e\u043c \u043f\u043e\u044f\u0441\u0435 \u0447\u0442\u043e \u0438 \u044e\u0442\u0430\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0448\u0442\u0430\u0442\u044b \u0441\u0448\u0430 \u0432 \u0442\u043e\u043c \u0436\u0435 \u0447\u0430\u0441\u043e\u0432\u043e\u043c \u043f\u043e\u044f\u0441\u0435 \u0447\u0442\u043e \u0438 \u044e\u0442\u0430",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels \u00e9tats am\u00e9ricains sont dans le m\u00eame fuseau horaire que lutah \nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "quels \u00e9tats am\u00e9ricains sont dans le m\u00eame fuseau horaire que lutah ",
        "language": "fr",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurios jav valstijos yra toje pa\u010dioje laiko juostoje kaip juta\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "kurios jav valstijos yra toje pa\u010dioje laiko juostoje kaip juta",
        "language": "lt",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which us states possess gold minerals\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "which us states possess gold minerals",
        "language": "en",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en qu\u00e9 estados de los estados unidos de am\u00e9rica hay oro\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "en qu\u00e9 estados de los estados unidos de am\u00e9rica hay oro",
        "language": "es",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welchen usstaaten gibt es goldvorkommen\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "in welchen usstaaten gibt es goldvorkommen",
        "language": "de",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0448\u0442\u0430\u0442\u0430\u0445 \u0441\u0448\u0430 \u0435\u0441\u0442\u044c \u0437\u0430\u043b\u0435\u0436\u0438 \u0437\u043e\u043b\u043e\u0442\u043e\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043c\u0438\u043d\u0435\u0440\u0430\u043b\u043e\u0432\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0448\u0442\u0430\u0442\u0430\u0445 \u0441\u0448\u0430 \u0435\u0441\u0442\u044c \u0437\u0430\u043b\u0435\u0436\u0438 \u0437\u043e\u043b\u043e\u0442\u043e\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043c\u0438\u043d\u0435\u0440\u0430\u043b\u043e\u0432",
        "language": "ru",
        "include_amr": false
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "list all boardgames by gmt",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 1,
        "rel_excluded": "publisher",
        "en_question": "list all boardgames by gmt",
        "question": "list all boardgames by gmt",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 juegos de mesa fueron hechos por gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "qu\u00e9 juegos de mesa fueron hechos por gmt",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 1,
        "rel_excluded": "publisher",
        "en_question": "list all boardgames by gmt",
        "question": "qu\u00e9 juegos de mesa fueron hechos por gmt",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "zeige mir alle brettspiele von gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "zeige mir alle brettspiele von gmt",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 1,
        "rel_excluded": "publisher",
        "en_question": "list all boardgames by gmt",
        "question": "zeige mir alle brettspiele von gmt",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0438\u0433\u0440\u044b gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0438\u0433\u0440\u044b gmt",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 1,
        "rel_excluded": "publisher",
        "en_question": "list all boardgames by gmt",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0438\u0433\u0440\u044b gmt",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "listez tous les jeux de soci\u00e9t\u00e9 de gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "listez tous les jeux de soci\u00e9t\u00e9 de gmt",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 1,
        "rel_excluded": "publisher",
        "en_question": "list all boardgames by gmt",
        "question": "listez tous les jeux de soci\u00e9t\u00e9 de gmt",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardykite visus gmt \u017eaidimus\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "list all boardgames by gmt",
        "question": "i\u0161vardykite visus gmt \u017eaidimus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "list all boardgames by gmt\nAMR: (l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }",
        "manipulated": 1,
        "rel_excluded": "publisher",
        "en_question": "list all boardgames by gmt",
        "question": "i\u0161vardykite visus gmt \u017eaidimus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "who developed skype",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 1,
        "rel_excluded": "developer",
        "en_question": "who developed skype",
        "question": "who developed skype",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n desarroll\u00f3 skype\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "qui\u00e9n desarroll\u00f3 skype",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 1,
        "rel_excluded": "developer",
        "en_question": "who developed skype",
        "question": "qui\u00e9n desarroll\u00f3 skype",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer hat skype entwickelt\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "wer hat skype entwickelt",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 1,
        "rel_excluded": "developer",
        "en_question": "who developed skype",
        "question": "wer hat skype entwickelt",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b skype\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b skype",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 1,
        "rel_excluded": "developer",
        "en_question": "who developed skype",
        "question": "\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b skype",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui a d\u00e9velopp\u00e9 skype \nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "qui a d\u00e9velopp\u00e9 skype ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 1,
        "rel_excluded": "developer",
        "en_question": "who developed skype",
        "question": "qui a d\u00e9velopp\u00e9 skype ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas suk\u016br\u0117 \u201eskype\u201c\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who developed skype",
        "question": "kas suk\u016br\u0117 \u201eskype\u201c",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who developed skype\nAMR: (d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "manipulated": 1,
        "rel_excluded": "developer",
        "en_question": "who developed skype",
        "question": "kas suk\u016br\u0117 \u201eskype\u201c",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "which people were born in heraklion",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 1,
        "rel_excluded": "person",
        "en_question": "which people were born in heraklion",
        "question": "which people were born in heraklion",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 personas nacieron en heraklion\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "qu\u00e9 personas nacieron en heraklion",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 1,
        "rel_excluded": "birthPlace",
        "en_question": "which people were born in heraklion",
        "question": "qu\u00e9 personas nacieron en heraklion",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche menschen wurden in heraklion geboren\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "welche menschen wurden in heraklion geboren",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 1,
        "rel_excluded": "birthPlace",
        "en_question": "which people were born in heraklion",
        "question": "welche menschen wurden in heraklion geboren",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043b\u044e\u0434\u0438 \u0440\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u0432 \u0438\u0440\u0430\u043a\u043b\u0438\u043e\u043d\u0435\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043b\u044e\u0434\u0438 \u0440\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u0432 \u0438\u0440\u0430\u043a\u043b\u0438\u043e\u043d\u0435",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 1,
        "rel_excluded": "birthPlace",
        "en_question": "which people were born in heraklion",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043b\u044e\u0434\u0438 \u0440\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u0432 \u0438\u0440\u0430\u043a\u043b\u0438\u043e\u043d\u0435",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est n\u00e9 \u00e0 heraklion \nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "qui est n\u00e9 \u00e0 heraklion ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 1,
        "rel_excluded": "person",
        "en_question": "which people were born in heraklion",
        "question": "qui est n\u00e9 \u00e0 heraklion ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas gim\u0117 heraklione\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which people were born in heraklion",
        "question": "kas gim\u0117 heraklione",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which people were born in heraklion\nAMR: (b / bear-02 :ARG1 (p / person :mod (a / amr-unknown)) :location (c / city :name (n / name :op1 \"Heraklion\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Person ; onto:birthPlace <http://dbpedia.org/resource/Heraklion>. }",
        "manipulated": 1,
        "rel_excluded": "birthPlace",
        "en_question": "which people were born in heraklion",
        "question": "kas gim\u0117 heraklione",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "in which us state is area 51 located",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 1,
        "rel_excluded": "location",
        "en_question": "in which us state is area 51 located",
        "question": "in which us state is area 51 located",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en cu\u00e1l estado de estados unidos esta situada el area 51\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "en cu\u00e1l estado de estados unidos esta situada el area 51",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 1,
        "rel_excluded": "country",
        "en_question": "in which us state is area 51 located",
        "question": "en cu\u00e1l estado de estados unidos esta situada el area 51",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welchem us bundesstaat liegt area 51\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "in welchem us bundesstaat liegt area 51",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 1,
        "rel_excluded": "country",
        "en_question": "in which us state is area 51 located",
        "question": "in welchem us bundesstaat liegt area 51",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u043e\u043c \u0448\u0442\u0430\u0442\u0435 \u0441\u0448\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u043e\u043d\u0430 51\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "\u0432 \u043a\u0430\u043a\u043e\u043c \u0448\u0442\u0430\u0442\u0435 \u0441\u0448\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u043e\u043d\u0430 51",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 1,
        "rel_excluded": "country",
        "en_question": "in which us state is area 51 located",
        "question": "\u0432 \u043a\u0430\u043a\u043e\u043c \u0448\u0442\u0430\u0442\u0435 \u0441\u0448\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u043e\u043d\u0430 51",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dans quel etat des etatsunis se situe larea 51 \nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "dans quel etat des etatsunis se situe larea 51 ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 1,
        "rel_excluded": "country",
        "en_question": "in which us state is area 51 located",
        "question": "dans quel etat des etatsunis se situe larea 51 ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurioje jav valstijoje yra karin\u0117 baz\u0117 51 zona\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "in which us state is area 51 located",
        "question": "kurioje jav valstijoje yra karin\u0117 baz\u0117 51 zona",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in which us state is area 51 located\nAMR: (l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }",
        "manipulated": 1,
        "rel_excluded": "country",
        "en_question": "in which us state is area 51 located",
        "question": "kurioje jav valstijoje yra karin\u0117 baz\u0117 51 zona",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "who is the mayor of new york city",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 1,
        "rel_excluded": "leaderName",
        "en_question": "who is the mayor of new york city",
        "question": "who is the mayor of new york city",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n es el alcalde de la cuidad de nueva york\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "qui\u00e9n es el alcalde de la cuidad de nueva york",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 1,
        "rel_excluded": "leaderName",
        "en_question": "who is the mayor of new york city",
        "question": "qui\u00e9n es el alcalde de la cuidad de nueva york",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer ist der b\u00fcrgermeister von new york city\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "wer ist der b\u00fcrgermeister von new york city",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 1,
        "rel_excluded": "leaderName",
        "en_question": "who is the mayor of new york city",
        "question": "wer ist der b\u00fcrgermeister von new york city",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u043c\u0435\u0440 \u043d\u044c\u044e \u0439\u043e\u0440\u043a\u0430\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "\u043a\u0442\u043e \u043c\u0435\u0440 \u043d\u044c\u044e \u0439\u043e\u0440\u043a\u0430",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 1,
        "rel_excluded": "leaderName",
        "en_question": "who is the mayor of new york city",
        "question": "\u043a\u0442\u043e \u043c\u0435\u0440 \u043d\u044c\u044e \u0439\u043e\u0440\u043a\u0430",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le maire de la cit\u00e9 de new york \nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "qui est le maire de la cit\u00e9 de new york ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 1,
        "rel_excluded": "leaderName",
        "en_question": "who is the mayor of new york city",
        "question": "qui est le maire de la cit\u00e9 de new york ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas yra niujorko meras\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the mayor of new york city",
        "question": "kas yra niujorko meras",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the mayor of new york city\nAMR: (h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }",
        "manipulated": 1,
        "rel_excluded": "leaderName",
        "en_question": "who is the mayor of new york city",
        "question": "kas yra niujorko meras",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which countries have places with more than two caves\nAMR: (h / have-03 :ARG0 (c / country :mod (a / amr-unknown)) :ARG1 (p / place :ARG0-of (h2 / have-03 :ARG1 (c2 / cave :quant (m / more-than :op1 2)))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "which countries have places with more than two caves",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 pa\u00edses tienen lugares con m\u00e1s de dos cuevas\nAMR: (h / have-03 :ARG0 (c / country :mod (a / amr-unknown)) :ARG1 (p / place :ARG0-of (h2 / have-03 :ARG1 (c2 / cave :quant (m / more-than :op1 2)))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "qu\u00e9 pa\u00edses tienen lugares con m\u00e1s de dos cuevas",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welche l\u00e4ndern gibt es mehr als 2 h\u00f6hlen\nAMR: (h / have-03 :ARG0 (c / country :mod (a / amr-unknown)) :ARG1 (p / place :ARG0-of (h2 / have-03 :ARG1 (c2 / cave :quant (m / more-than :op1 2)))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "in welche l\u00e4ndern gibt es mehr als 2 h\u00f6hlen",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0435\u0441\u0442\u044c \u043c\u0435\u0441\u0442\u0430 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0449\u0435\u0440 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u0434\u0432\u0435\nAMR: (h / have-03 :ARG0 (c / country :mod (a / amr-unknown)) :ARG1 (p / place :ARG0-of (h2 / have-03 :ARG1 (c2 / cave :quant (m / more-than :op1 2)))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0435\u0441\u0442\u044c \u043c\u0435\u0441\u0442\u0430 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0449\u0435\u0440 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u0434\u0432\u0435",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le maire de la cit\u00e9 de new york \nAMR: (h / have-03 :ARG0 (c / country :mod (a / amr-unknown)) :ARG1 (p / place :ARG0-of (h2 / have-03 :ARG1 (c2 / cave :quant (m / more-than :op1 2)))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "qui est le maire de la cit\u00e9 de new york ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kuriose \u0161alyse yra viet\u0173 kuriose yra daugiau nei du urvai\nAMR: (h / have-03 :ARG0 (c / country :mod (a / amr-unknown)) :ARG1 (p / place :ARG0-of (h2 / have-03 :ARG1 (c2 / cave :quant (m / more-than :op1 2)))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which countries have places with more than two caves",
        "question": "kuriose \u0161alyse yra viet\u0173 kuriose yra daugiau nei du urvai",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Abraham\" :op2 \"Lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "where did abraham lincoln die",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "d\u00f3nde muri\u00f3 abraham lincoln\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Abraham\" :op2 \"Lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "d\u00f3nde muri\u00f3 abraham lincoln",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wo ist abraham lincoln gestorben\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Abraham\" :op2 \"Lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "wo ist abraham lincoln gestorben",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u043e\u0433\u0434\u0430 \u0443\u043c\u0435\u0440 \u0430\u0431\u0440\u0430\u0445\u0430\u043c \u043b\u0438\u043d\u043a\u043e\u043b\u044c\u043d\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Abraham\" :op2 \"Lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "\u043a\u043e\u0433\u0434\u0430 \u0443\u043c\u0435\u0440 \u0430\u0431\u0440\u0430\u0445\u0430\u043c \u043b\u0438\u043d\u043a\u043e\u043b\u044c\u043d",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "o\u00f9 est d\u00e9c\u00e9d\u00e9 abraham lincoln \nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Abraham\" :op2 \"Lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "o\u00f9 est d\u00e9c\u00e9d\u00e9 abraham lincoln ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kur mire abraomas linkolnas\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"Abraham\" :op2 \"Lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "where did abraham lincoln die",
        "question": "kur mire abraomas linkolnas",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "which airports does air china serve",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 1,
        "rel_excluded": "targetAirport",
        "en_question": "which airports does air china serve",
        "question": "which airports does air china serve",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en qu\u00e9 aeropuertos opera air china\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "en qu\u00e9 aeropuertos opera air china",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 1,
        "rel_excluded": "targetAirport",
        "en_question": "which airports does air china serve",
        "question": "en qu\u00e9 aeropuertos opera air china",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche flugh\u00e4fen bedient air china\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "welche flugh\u00e4fen bedient air china",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 1,
        "rel_excluded": "targetAirport",
        "en_question": "which airports does air china serve",
        "question": "welche flugh\u00e4fen bedient air china",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 air china\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 air china",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 1,
        "rel_excluded": "targetAirport",
        "en_question": "which airports does air china serve",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 air china",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels a\u00e9roports sont desservis par air china \nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "quels a\u00e9roports sont desservis par air china ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 1,
        "rel_excluded": "targetAirport",
        "en_question": "which airports does air china serve",
        "question": "quels a\u00e9roports sont desservis par air china ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "oro uostai kuriuos aptarnauja \u201eair china\u201c\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which airports does air china serve",
        "question": "oro uostai kuriuos aptarnauja \u201eair china\u201c",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which airports does air china serve\nAMR: (s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "manipulated": 1,
        "rel_excluded": "targetAirport",
        "en_question": "which airports does air china serve",
        "question": "oro uostai kuriuos aptarnauja \u201eair china\u201c",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "give me all actors starring in movies directed by and starring william shatner",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 1,
        "rel_excluded": "starring",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "give me all actors starring in movies directed by and starring william shatner",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 actores protagonizan pel\u00edculas dirigidas y protagonizadas por william shatner\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "qu\u00e9 actores protagonizan pel\u00edculas dirigidas y protagonizadas por william shatner",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 1,
        "rel_excluded": "starring",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "qu\u00e9 actores protagonizan pel\u00edculas dirigidas y protagonizadas por william shatner",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "gib mir alle schauspieler die in filmen gespielt haben in dem william shatner gespielt und gleichyeitig regie gef\u00fchrt hat\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "gib mir alle schauspieler die in filmen gespielt haben in dem william shatner gespielt und gleichyeitig regie gef\u00fchrt hat",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 1,
        "rel_excluded": "director",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "gib mir alle schauspieler die in filmen gespielt haben in dem william shatner gespielt und gleichyeitig regie gef\u00fchrt hat",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u043a\u0442\u0435\u0440\u043e\u0432 \u0441\u043d\u0438\u043c\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0440\u043e\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0443\u0438\u043b\u044c\u044f\u043c\u043e\u043c \u0448\u0435\u0442\u043d\u0435\u0440\u043e\u043c\u0432 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043c \u0441\u0430\u043c\u0438\u043c\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u043a\u0442\u0435\u0440\u043e\u0432 \u0441\u043d\u0438\u043c\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0440\u043e\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0443\u0438\u043b\u044c\u044f\u043c\u043e\u043c \u0448\u0435\u0442\u043d\u0435\u0440\u043e\u043c\u0432 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043c \u0441\u0430\u043c\u0438\u043c",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 1,
        "rel_excluded": "starring",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "\u043d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u043a\u0442\u0435\u0440\u043e\u0432 \u0441\u043d\u0438\u043c\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0440\u043e\u043b\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0443\u0438\u043b\u044c\u044f\u043c\u043e\u043c \u0448\u0435\u0442\u043d\u0435\u0440\u043e\u043c\u0432 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u043c \u0441\u0430\u043c\u0438\u043c",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi tous les acteurs qui figurent dans les films r\u00e9alis\u00e9s par william shatner\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "donnezmoi tous les acteurs qui figurent dans les films r\u00e9alis\u00e9s par william shatner",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 1,
        "rel_excluded": "director",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "donnezmoi tous les acteurs qui figurent dans les films r\u00e9alis\u00e9s par william shatner",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokie aktoriai vaidino filmuose kuriuose re\u017eisierius ir aktorius buvo williamas shatneris\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "kokie aktoriai vaidino filmuose kuriuose re\u017eisierius ir aktorius buvo williamas shatneris",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all actors starring in movies directed by and starring william shatner\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }",
        "manipulated": 1,
        "rel_excluded": "starring",
        "en_question": "give me all actors starring in movies directed by and starring william shatner",
        "question": "kokie aktoriai vaidino filmuose kuriuose re\u017eisierius ir aktorius buvo williamas shatneris",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "what are the official languages of the philippines",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 1,
        "rel_excluded": "officialLanguage",
        "en_question": "what are the official languages of the philippines",
        "question": "what are the official languages of the philippines",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "cu\u00e1les son los idiomas oficiales de filipinas\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "cu\u00e1les son los idiomas oficiales de filipinas",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 1,
        "rel_excluded": "officialLanguage",
        "en_question": "what are the official languages of the philippines",
        "question": "cu\u00e1les son los idiomas oficiales de filipinas",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "was ist die amtssprache auf den philippinen\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "was ist die amtssprache auf den philippinen",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 1,
        "rel_excluded": "officialLanguage",
        "en_question": "what are the official languages of the philippines",
        "question": "was ist die amtssprache auf den philippinen",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438 \u043d\u0430 \u0444\u0438\u043b\u043b\u0438\u043f\u0438\u043d\u0430\u0445\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438 \u043d\u0430 \u0444\u0438\u043b\u043b\u0438\u043f\u0438\u043d\u0430\u0445",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 1,
        "rel_excluded": "officialLanguage",
        "en_question": "what are the official languages of the philippines",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438 \u043d\u0430 \u0444\u0438\u043b\u043b\u0438\u043f\u0438\u043d\u0430\u0445",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels sont les langues officielles des philippines \nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "quels sont les langues officielles des philippines ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 1,
        "rel_excluded": "officialLanguage",
        "en_question": "what are the official languages of the philippines",
        "question": "quels sont les langues officielles des philippines ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokios yra oficialios filipin\u0173 kalbos\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "what are the official languages of the philippines",
        "question": "kokios yra oficialios filipin\u0173 kalbos",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines\nAMR: (l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "manipulated": 1,
        "rel_excluded": "officialLanguage",
        "en_question": "what are the official languages of the philippines",
        "question": "kokios yra oficialios filipin\u0173 kalbos",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "give me all danish films",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 1,
        "rel_excluded": "film",
        "en_question": "give me all danish films",
        "question": "give me all danish films",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame todas las pel\u00edculas danesas\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "dame todas las pel\u00edculas danesas",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 1,
        "rel_excluded": "film",
        "en_question": "give me all danish films",
        "question": "dame todas las pel\u00edculas danesas",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste als d\u00e4nischen filme auf\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "liste als d\u00e4nischen filme auf",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 1,
        "rel_excluded": "film",
        "en_question": "give me all danish films",
        "question": "liste als d\u00e4nischen filme auf",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0434\u0430\u0442\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u043c\u044b\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0434\u0430\u0442\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u043c\u044b",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 1,
        "rel_excluded": "film",
        "en_question": "give me all danish films",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0434\u0430\u0442\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u043c\u044b",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi tous les films danois\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "donnezmoi tous les films danois",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 1,
        "rel_excluded": "country",
        "en_question": "give me all danish films",
        "question": "donnezmoi tous les films danois",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u012fvardykite visus dan\u0173 filmus\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me all danish films",
        "question": "\u012fvardykite visus dan\u0173 filmus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me all danish films\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (f / film :mod (a / all) :mod (c / country :name (n / name :op1 \"Denmark\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:country res:Denmark }",
        "manipulated": 1,
        "rel_excluded": "film",
        "en_question": "give me all danish films",
        "question": "\u012fvardykite visus dan\u0173 filmus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "which movies starring brad pitt were directed by guy ritchie",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 1,
        "rel_excluded": "director",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "which movies starring brad pitt were directed by guy ritchie",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 pel\u00edculas protagonizadas por brad pitt han sido dirigidas por guy ritchie\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "qu\u00e9 pel\u00edculas protagonizadas por brad pitt han sido dirigidas por guy ritchie",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 1,
        "rel_excluded": "film",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "qu\u00e9 pel\u00edculas protagonizadas por brad pitt han sido dirigidas por guy ritchie",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste brad pitt filme auf in denen guy ritchie regie gef\u00fchrt hat\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "liste brad pitt filme auf in denen guy ritchie regie gef\u00fchrt hat",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 1,
        "rel_excluded": "film",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "liste brad pitt filme auf in denen guy ritchie regie gef\u00fchrt hat",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0433\u0430\u0435\u043c \u0440\u0438\u0447\u0438\u0438 \u0441\u043d\u0438\u043c\u0430\u043b\u0441\u044f \u0431\u0440\u044d\u0434 \u043f\u0438\u0442\u0442\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0433\u0430\u0435\u043c \u0440\u0438\u0447\u0438\u0438 \u0441\u043d\u0438\u043c\u0430\u043b\u0441\u044f \u0431\u0440\u044d\u0434 \u043f\u0438\u0442\u0442",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 1,
        "rel_excluded": "film",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0444\u0438\u043b\u044c\u043c\u0430\u0445 \u0441\u0440\u0435\u0436\u0438\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0433\u0430\u0435\u043c \u0440\u0438\u0447\u0438\u0438 \u0441\u043d\u0438\u043c\u0430\u043b\u0441\u044f \u0431\u0440\u044d\u0434 \u043f\u0438\u0442\u0442",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels films avec brad pitt sont r\u00e9alis\u00e9s par guy ritchie \nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "quels films avec brad pitt sont r\u00e9alis\u00e9s par guy ritchie ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 1,
        "rel_excluded": "starring",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "quels films avec brad pitt sont r\u00e9alis\u00e9s par guy ritchie ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokius filmus su bradu pittu re\u017eisavo guy ritchie\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "kokius filmus su bradu pittu re\u017eisavo guy ritchie",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which movies starring brad pitt were directed by guy ritchie\nAMR: (d / direct-01 :ARG0 (p / person :name (n / name :op1 \"Guy\" :op2 \"Ritchie\")) :ARG1 (m / movie :mod (a / amr-unknown) :ARG2-of (s / star-01 :ARG1 (p2 / person :name (n2 / name :op1 \"Brad\" :op2 \"Pitt\")))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:starring res:Brad_Pitt ; dbo:director res:Guy_Ritchie }",
        "manipulated": 1,
        "rel_excluded": "starring",
        "en_question": "which movies starring brad pitt were directed by guy ritchie",
        "question": "kokius filmus su bradu pittu re\u017eisavo guy ritchie",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "give me the grandchildren of bruce lee",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 1,
        "rel_excluded": "child",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "give me the grandchildren of bruce lee",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9nes son los nietos de bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "qui\u00e9nes son los nietos de bruce lee",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 1,
        "rel_excluded": "child",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "qui\u00e9nes son los nietos de bruce lee",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "zeige die enkelkinder von bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "zeige die enkelkinder von bruce lee",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 1,
        "rel_excluded": "child",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "zeige die enkelkinder von bruce lee",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u043d\u0443\u043a\u043e\u0432 \u0431\u0440\u044e\u0441\u0430 \u043b\u0438\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u043d\u0443\u043a\u043e\u0432 \u0431\u0440\u044e\u0441\u0430 \u043b\u0438",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 1,
        "rel_excluded": "child",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u043d\u0443\u043a\u043e\u0432 \u0431\u0440\u044e\u0441\u0430 \u043b\u0438",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnemoi les petitsenfants de bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "donnemoi les petitsenfants de bruce lee",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 1,
        "rel_excluded": "child",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "donnemoi les petitsenfants de bruce lee",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "duok man bruceo lee an\u016bkus\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "duok man bruceo lee an\u016bkus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the grandchildren of bruce lee\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Bruce\" :op2 \"Lee\")) :ARG2 (g2 / grandchild))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Bruce_Lee dbo:child ?child . ?child <http://dbpedia.org/property/children> ?uri }",
        "manipulated": 1,
        "rel_excluded": "child",
        "en_question": "give me the grandchildren of bruce lee",
        "question": "duok man bruceo lee an\u016bkus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "which other weapons did the designer of the uzi develop",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 1,
        "rel_excluded": "weapon",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "which other weapons did the designer of the uzi develop",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 otras armas desarroll\u00f3 el dise\u00f1ador de la uzi\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "qu\u00e9 otras armas desarroll\u00f3 el dise\u00f1ador de la uzi",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 1,
        "rel_excluded": "designer",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "qu\u00e9 otras armas desarroll\u00f3 el dise\u00f1ador de la uzi",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche anderen waffen wurden vom designer der uzi entwickelt\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "welche anderen waffen wurden vom designer der uzi entwickelt",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 1,
        "rel_excluded": "designer",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "welche anderen waffen wurden vom designer der uzi entwickelt",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0438\u043d\u044b\u0435 \u043e\u0440\u0443\u0436\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0435\u043b \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c \u0443\u0437\u0438\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0438\u043d\u044b\u0435 \u043e\u0440\u0443\u0436\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0435\u043b \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c \u0443\u0437\u0438",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 1,
        "rel_excluded": "designer",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0438\u043d\u044b\u0435 \u043e\u0440\u0443\u0436\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0435\u043b \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u044c \u0443\u0437\u0438",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quelles autres armes ont \u00e9t\u00e9 d\u00e9velopp\u00e9es par le cr\u00e9ateur du uzi \nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "quelles autres armes ont \u00e9t\u00e9 d\u00e9velopp\u00e9es par le cr\u00e9ateur du uzi ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 1,
        "rel_excluded": "weapon",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "quelles autres armes ont \u00e9t\u00e9 d\u00e9velopp\u00e9es par le cr\u00e9ateur du uzi ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokius kitus ginklus suk\u016br\u0117 uzi konstruktorius\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "kokius kitus ginklus suk\u016br\u0117 uzi konstruktorius",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which other weapons did the designer of the uzi develop\nAMR: (d / develop-02 :ARG0 (p / person :ARG0-of (d2 / design-01 :ARG1 (p2 / weapon :name (n / name :op1 \"Uzi\")))) :ARG1 (w2 / weapon :mod (a / amr-unknown) :mod (o / other)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Weapon ; dbp:designer ?x . res:Uzi dbp:designer ?x FILTER ( ?uri != res:Uzi ) }",
        "manipulated": 1,
        "rel_excluded": "designer",
        "en_question": "which other weapons did the designer of the uzi develop",
        "question": "kokius kitus ginklus suk\u016br\u0117 uzi konstruktorius",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "who is the owner of universal studios",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 1,
        "rel_excluded": "owner",
        "en_question": "who is the owner of universal studios",
        "question": "who is the owner of universal studios",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n es el due\u00f1o de universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "qui\u00e9n es el due\u00f1o de universal studios",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 1,
        "rel_excluded": "owner",
        "en_question": "who is the owner of universal studios",
        "question": "qui\u00e9n es el due\u00f1o de universal studios",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wem geh\u00f6ren die universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "wem geh\u00f6ren die universal studios",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 1,
        "rel_excluded": "owner",
        "en_question": "who is the owner of universal studios",
        "question": "wem geh\u00f6ren die universal studios",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c universal studios",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 1,
        "rel_excluded": "owner",
        "en_question": "who is the owner of universal studios",
        "question": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c universal studios",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui est le propri\u00e9taire de universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "qui est le propri\u00e9taire de universal studios",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 1,
        "rel_excluded": "owner",
        "en_question": "who is the owner of universal studios",
        "question": "qui est le propri\u00e9taire de universal studios",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas yra \u201euniversal studios\u201c savininkas\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who is the owner of universal studios",
        "question": "kas yra \u201euniversal studios\u201c savininkas",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios\nAMR: (o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "manipulated": 1,
        "rel_excluded": "owner",
        "en_question": "who is the owner of universal studios",
        "question": "kas yra \u201euniversal studios\u201c savininkas",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which state of the usa has the highest population density\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"USA\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most)) :mod (p / populate-01)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "which state of the usa has the highest population density",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "cu\u00e1l estado de estados unidos tiene la mayor densidad poblacional\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"USA\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most)) :mod (p / populate-01)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "cu\u00e1l estado de estados unidos tiene la mayor densidad poblacional",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welcher staat in den usa hat die h\u00f6chste bev\u00f6lkerungsdichte\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"USA\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most)) :mod (p / populate-01)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "welcher staat in den usa hat die h\u00f6chste bev\u00f6lkerungsdichte",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u0448\u0442\u0430\u0442\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u0441\u0430\u043c\u0443\u044e \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0448\u0430\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"USA\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most)) :mod (p / populate-01)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "\u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u0448\u0442\u0430\u0442\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u0441\u0430\u043c\u0443\u044e \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0448\u0430",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quel \u00e9tat des \u00e9tats unis a la densit\u00e9 de population la plus \u00e9lev\u00e9e\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"USA\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most)) :mod (p / populate-01)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "quel \u00e9tat des \u00e9tats unis a la densit\u00e9 de population la plus \u00e9lev\u00e9e",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurioje jav valstijoje gyventoj\u0173 tankumas did\u017eiausias\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"USA\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most)) :mod (p / populate-01)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:densityrank ?rank } ORDER BY ASC(?rank) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the usa has the highest population density",
        "question": "kurioje jav valstijoje gyventoj\u0173 tankumas did\u017eiausias",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which monarchs were married to a german\nAMR: (m / marry-01 :ARG1 (a2 / amr-unknown :ARG0-of (h / have-org-role-91 :ARG2 (m2 / monarch))) :ARG2 (p2 / person :mod (c / country :name (n / name :op1 \"Germany\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "which monarchs were married to a german",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 monarcas estaban casados con una persona alemana\nAMR: (m / marry-01 :ARG1 (a2 / amr-unknown :ARG0-of (h / have-org-role-91 :ARG2 (m2 / monarch))) :ARG2 (p2 / person :mod (c / country :name (n / name :op1 \"Germany\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "qu\u00e9 monarcas estaban casados con una persona alemana",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche monarchen waren mit deutschen verheiratet\nAMR: (m / marry-01 :ARG1 (a2 / amr-unknown :ARG0-of (h / have-org-role-91 :ARG2 (m2 / monarch))) :ARG2 (p2 / person :mod (c / country :name (n / name :op1 \"Germany\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "welche monarchen waren mit deutschen verheiratet",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0438\u0437 \u043c\u043e\u043d\u0430\u0440\u0445\u043e\u0432 \u0431\u044b\u043b \u0436\u0435\u043d\u0430\u0442 \u043d\u0430 \u043d\u0435\u043c\u043a\u0435\nAMR: (m / marry-01 :ARG1 (a2 / amr-unknown :ARG0-of (h / have-org-role-91 :ARG2 (m2 / monarch))) :ARG2 (p2 / person :mod (c / country :name (n / name :op1 \"Germany\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "\u043a\u0442\u043e \u0438\u0437 \u043c\u043e\u043d\u0430\u0440\u0445\u043e\u0432 \u0431\u044b\u043b \u0436\u0435\u043d\u0430\u0442 \u043d\u0430 \u043d\u0435\u043c\u043a\u0435",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels monarques ont \u00e9t\u00e9 mari\u00e9s \u00e0 des allemands \nAMR: (m / marry-01 :ARG1 (a2 / amr-unknown :ARG0-of (h / have-org-role-91 :ARG2 (m2 / monarch))) :ARG2 (p2 / person :mod (c / country :name (n / name :op1 \"Germany\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "quels monarques ont \u00e9t\u00e9 mari\u00e9s \u00e0 des allemands ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurie monarchai buvo ved\u0119 vokietes\nAMR: (m / marry-01 :ARG1 (a2 / amr-unknown :ARG0-of (h / have-org-role-91 :ARG2 (m2 / monarch))) :ARG2 (p2 / person :mod (c / country :name (n / name :op1 \"Germany\"))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Monarch ; dbo:spouse ?spouse { ?spouse dbo:birthPlace res:Germany } UNION { ?spouse dbo:birthPlace ?p . ?p dbo:country res:Germany } }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which monarchs were married to a german",
        "question": "kurie monarchai buvo ved\u0119 vokietes",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which organizations were founded in 1950\nAMR: (f / found-01 :ARG1 (o / organization :mod (a / amr-unknown)) :time (d / date-entity :year 1950))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "which organizations were founded in 1950",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 organizaciones fueron establecidas en 1950\nAMR: (f / found-01 :ARG1 (o / organization :mod (a / amr-unknown)) :time (d / date-entity :year 1950))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "qu\u00e9 organizaciones fueron establecidas en 1950",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche organisationen wurden 1950 gegr\u00fcndet\nAMR: (f / found-01 :ARG1 (o / organization :mod (a / amr-unknown)) :time (d / date-entity :year 1950))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "welche organisationen wurden 1950 gegr\u00fcndet",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u044b\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b \u0432 1950 \u0433\u043e\u0434\u0443\nAMR: (f / found-01 :ARG1 (o / organization :mod (a / amr-unknown)) :time (d / date-entity :year 1950))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u044b\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b \u0432 1950 \u0433\u043e\u0434\u0443",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quelles organisations ont \u00e9t\u00e9 fond\u00e9es en 1950 \nAMR: (f / found-01 :ARG1 (o / organization :mod (a / amr-unknown)) :time (d / date-entity :year 1950))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "quelles organisations ont \u00e9t\u00e9 fond\u00e9es en 1950 ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokios organizacijos buvo \u012fkurtos 1930 m\nAMR: (f / found-01 :ARG1 (o / organization :mod (a / amr-unknown)) :time (d / date-entity :year 1950))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Organisation { ?uri dbo:formationYear ?date } UNION { ?uri dbo:foundingYear ?date } UNION { ?uri dbp:foundation ?date } UNION { ?uri dbp:formation ?date } FILTER regex(?date, \"^1950\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which organizations were founded in 1950",
        "question": "kokios organizacijos buvo \u012fkurtos 1930 m",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "who created the comic captain america",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 1,
        "rel_excluded": "creator",
        "en_question": "who created the comic captain america",
        "question": "who created the comic captain america",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n cre\u00f3 el comic capit\u00e1n am\u00e9rica\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "qui\u00e9n cre\u00f3 el comic capit\u00e1n am\u00e9rica",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 1,
        "rel_excluded": "creator",
        "en_question": "who created the comic captain america",
        "question": "qui\u00e9n cre\u00f3 el comic capit\u00e1n am\u00e9rica",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer ist der sch\u00f6pfer von captain america\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "wer ist der sch\u00f6pfer von captain america",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 1,
        "rel_excluded": "creator",
        "en_question": "who created the comic captain america",
        "question": "wer ist der sch\u00f6pfer von captain america",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u0440\u043e\u043c \u043a\u043e\u043c\u0438\u043a\u0441\u0430 \u043a\u0430\u043f\u0438\u0442\u0430\u043d \u0430\u043c\u0435\u0440\u0438\u043a\u0430\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u0440\u043e\u043c \u043a\u043e\u043c\u0438\u043a\u0441\u0430 \u043a\u0430\u043f\u0438\u0442\u0430\u043d \u0430\u043c\u0435\u0440\u0438\u043a\u0430",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 1,
        "rel_excluded": "creator",
        "en_question": "who created the comic captain america",
        "question": "\u043a\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u0440\u043e\u043c \u043a\u043e\u043c\u0438\u043a\u0441\u0430 \u043a\u0430\u043f\u0438\u0442\u0430\u043d \u0430\u043c\u0435\u0440\u0438\u043a\u0430",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui a cr\u00e9\u00e9 le comic captain america\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "qui a cr\u00e9\u00e9 le comic captain america",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 1,
        "rel_excluded": "creator",
        "en_question": "who created the comic captain america",
        "question": "qui a cr\u00e9\u00e9 le comic captain america",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kas suk\u016br\u0117 kapitono amerikos komiks\u0105\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who created the comic captain america",
        "question": "kas suk\u016br\u0117 kapitono amerikos komiks\u0105",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who created the comic captain america\nAMR: (c / create-01 :ARG0 (a / amr-unknown) :ARG1 (c2 / comic :name (n / name :op1 \"Captain\" :op2 \"America\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Captain_America dbo:creator ?uri }",
        "manipulated": 1,
        "rel_excluded": "creator",
        "en_question": "who created the comic captain america",
        "question": "kas suk\u016br\u0117 kapitono amerikos komiks\u0105",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me the apollo 14 astronauts\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (a / astronaut :mod (s / spaceship :name (n / name :op1 \"Apollo\" :op2 \"14\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "give me the apollo 14 astronauts",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 astronautas participaron en la misi\u00f3n apolo 14\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (a / astronaut :mod (s / spaceship :name (n / name :op1 \"Apollo\" :op2 \"14\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "qu\u00e9 astronautas participaron en la misi\u00f3n apolo 14",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer war an bord der apollo 14\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (a / astronaut :mod (s / spaceship :name (n / name :op1 \"Apollo\" :op2 \"14\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "wer war an bord der apollo 14",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u044d\u043a\u0438\u043f\u0430\u0436 \u0430\u043f\u043e\u043b\u043b\u043e 14\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (a / astronaut :mod (s / spaceship :name (n / name :op1 \"Apollo\" :op2 \"14\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u044d\u043a\u0438\u043f\u0430\u0436 \u0430\u043f\u043e\u043b\u043b\u043e 14",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnemoi tous les astronautes dapollo 14\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (a / astronaut :mod (s / spaceship :name (n / name :op1 \"Apollo\" :op2 \"14\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "donnemoi tous les astronautes dapollo 14",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "pasakyk man apollo 14 astronaut\u0173 vardus\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (a / astronaut :mod (s / spaceship :name (n / name :op1 \"Apollo\" :op2 \"14\"))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:mission res:Apollo_14 }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me the apollo 14 astronauts",
        "question": "pasakyk man apollo 14 astronaut\u0173 vardus",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "who wrote the book the pillars of the earth",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 1,
        "rel_excluded": "author",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "who wrote the book the pillars of the earth",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qui\u00e9n escribi\u00f3 el libro los pilares de la tierra\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "qui\u00e9n escribi\u00f3 el libro los pilares de la tierra",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 1,
        "rel_excluded": "author",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "qui\u00e9n escribi\u00f3 el libro los pilares de la tierra",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "wer hat das buch die s\u00e4ulen der welt geschrieben\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "wer hat das buch die s\u00e4ulen der welt geschrieben",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 1,
        "rel_excluded": "author",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "wer hat das buch die s\u00e4ulen der welt geschrieben",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0442\u043e \u0430\u0432\u0442\u043e\u0440 \u043a\u043d\u0438\u0433\u0438 \u0441\u0442\u043e\u043b\u043f\u044b \u0437\u0435\u043c\u043b\u0438\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "\u043a\u0442\u043e \u0430\u0432\u0442\u043e\u0440 \u043a\u043d\u0438\u0433\u0438 \u0441\u0442\u043e\u043b\u043f\u044b \u0437\u0435\u043c\u043b\u0438",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 1,
        "rel_excluded": "author",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "\u043a\u0442\u043e \u0430\u0432\u0442\u043e\u0440 \u043a\u043d\u0438\u0433\u0438 \u0441\u0442\u043e\u043b\u043f\u044b \u0437\u0435\u043c\u043b\u0438",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quelles f\u00eates sont c\u00e9l\u00e9br\u00e9es dans le monde entier\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "quelles f\u00eates sont c\u00e9l\u00e9br\u00e9es dans le monde entier",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 1,
        "rel_excluded": "author",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "quelles f\u00eates sont c\u00e9l\u00e9br\u00e9es dans le monde entier",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "ar neimaras \u017eaid\u0117 u\u017e real madrid \nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "ar neimaras \u017eaid\u0117 u\u017e real madrid ",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "who wrote the book the pillars of the earth\nAMR: (w / write-01 :ARG0 (a / amr-unknown) :ARG1 (b / book :name (n / name :op1 \"The\" :op2 \"Pillars\" :op3 \"of\" :op4 \"the\" :op5 \"Earth\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:The_Pillars_of_the_Earth dbo:author ?uri }",
        "manipulated": 1,
        "rel_excluded": "author",
        "en_question": "who wrote the book the pillars of the earth",
        "question": "ar neimaras \u017eaid\u0117 u\u017e real madrid ",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which state of the united states of america has the highest density\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"United\" :op2 \"States\" :op3 \"of\" :op4 \"America\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "which state of the united states of america has the highest density",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 estado de los estados unidos de am\u00e9rica tiene la mayor densidad poblacional\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"United\" :op2 \"States\" :op3 \"of\" :op4 \"America\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "qu\u00e9 estado de los estados unidos de am\u00e9rica tiene la mayor densidad poblacional",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welcher usbundesstaat hat die h\u00f6chste bev\u00f6lkerungsdichte\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"United\" :op2 \"States\" :op3 \"of\" :op4 \"America\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "welcher usbundesstaat hat die h\u00f6chste bev\u00f6lkerungsdichte",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u043e\u0439 \u0448\u0442\u0430\u0442 \u0441\u0448\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"United\" :op2 \"States\" :op3 \"of\" :op4 \"America\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "\u043a\u0430\u043a\u043e\u0439 \u0448\u0442\u0430\u0442 \u0441\u0448\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quel \u00e9tat des usa a la plus grande densit\u00e9 \nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"United\" :op2 \"States\" :op3 \"of\" :op4 \"America\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "quel \u00e9tat des usa a la plus grande densit\u00e9 ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurioje jungtini\u0173 amerikos valstij\u0173 valstijoje gyventoj\u0173 tankumas did\u017eiausias\nAMR: (h / have-03 :ARG0 (s / state :mod (a / amr-unknown) :part-of (c / country :name (n / name :op1 \"United\" :op2 \"States\" :op3 \"of\" :op4 \"America\"))) :ARG1 (d / density :ARG1-of (h2 / have-degree-91 :ARG2 (h3 / high-02 :ARG1 d) :ARG3 (m / most))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dbp:densityrank ?density } ORDER BY ASC(?density) LIMIT 1",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which state of the united states of america has the highest density",
        "question": "kurioje jungtini\u0173 amerikos valstij\u0173 valstijoje gyventoj\u0173 tankumas did\u017eiausias",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which spaceflights were launched from baikonur\nAMR: (l / launch-01 :ARG1 (s / spaceflight :mod (a / amr-unknown)) :source (c / city :name (n / name :op1 \"Baikonur\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "which spaceflights were launched from baikonur",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 misiones espaciales partieron desde baikonur\nAMR: (l / launch-01 :ARG1 (s / spaceflight :mod (a / amr-unknown)) :source (c / city :name (n / name :op1 \"Baikonur\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "qu\u00e9 misiones espaciales partieron desde baikonur",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche raumfl\u00fcge starteten von baikonur aus\nAMR: (l / launch-01 :ARG1 (s / spaceflight :mod (a / amr-unknown)) :source (c / city :name (n / name :op1 \"Baikonur\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "welche raumfl\u00fcge starteten von baikonur aus",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u043a\u043e\u0441\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\u0438 \u0441 \u0431\u0430\u0439\u043a\u043e\u043d\u0443\u0440\u0430\nAMR: (l / launch-01 :ARG1 (s / spaceflight :mod (a / amr-unknown)) :source (c / city :name (n / name :op1 \"Baikonur\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u043a\u043e\u0441\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\u0438 \u0441 \u0431\u0430\u0439\u043a\u043e\u043d\u0443\u0440\u0430",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels vols spatiaux ont \u00e9t\u00e9 lanc\u00e9s depuis ba\u00efkonour \nAMR: (l / launch-01 :ARG1 (s / spaceflight :mod (a / amr-unknown)) :source (c / city :name (n / name :op1 \"Baikonur\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "quels vols spatiaux ont \u00e9t\u00e9 lanc\u00e9s depuis ba\u00efkonour ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kokie erdv\u0117laiviai buvo paleisti i\u0161 baikon\u016bro\nAMR: (l / launch-01 :ARG1 (s / spaceflight :mod (a / amr-unknown)) :source (c / city :name (n / name :op1 \"Baikonur\")))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/launchPad> res:Baikonur_Cosmodrome }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which spaceflights were launched from baikonur",
        "question": "kokie erdv\u0117laiviai buvo paleisti i\u0161 baikon\u016bro",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "give me a list of all trumpet players that were bandleaders",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 1,
        "rel_excluded": "instrument",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "give me a list of all trumpet players that were bandleaders",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "dame una lista de todos los trompeteros que fueron l\u00edderes de una banda\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "dame una lista de todos los trompeteros que fueron l\u00edderes de una banda",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 1,
        "rel_excluded": "occupation",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "dame una lista de todos los trompeteros que fueron l\u00edderes de una banda",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "liste alle trompetenspieler auf die bandleader einer band waren\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "liste alle trompetenspieler auf die bandleader einer band waren",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 1,
        "rel_excluded": "instrument",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "liste alle trompetenspieler auf die bandleader einer band waren",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0442\u0440\u0443\u0431\u0430\u0447\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043b\u0438\u0434\u0435\u0440\u0430\u043c\u0438 \u0433\u0440\u0443\u043f\u043f\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0442\u0440\u0443\u0431\u0430\u0447\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043b\u0438\u0434\u0435\u0440\u0430\u043c\u0438 \u0433\u0440\u0443\u043f\u043f",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 1,
        "rel_excluded": "instrument",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435\u0445 \u0442\u0440\u0443\u0431\u0430\u0447\u0435\u0439 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043b\u0438\u0434\u0435\u0440\u0430\u043c\u0438 \u0433\u0440\u0443\u043f\u043f",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "donnezmoi une liste de tous les joueurs de trempette qui sont chefs de groupe\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "donnezmoi une liste de tous les joueurs de trempette qui sont chefs de groupe",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 1,
        "rel_excluded": "instrument",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "donnezmoi une liste de tous les joueurs de trempette qui sont chefs de groupe",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "i\u0161vardykite visus trimitus kurie buvo orkestro dirigentai\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "i\u0161vardykite visus trimitus kurie buvo orkestro dirigentai",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "give me a list of all trumpet players that were bandleaders\nAMR: (g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (t2 / thing :ARG2-of (l / list-01 :ARG1 (p / person :ARG0-of (p2 / play-11 :ARG2 (t / trumpet)) :ARG0-of (l2 / lead-01 :ARG1 (b / band)) :mod (a / all)))) :ARG2 (i / i))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation res:Bandleader ; dbo:instrument res:Trumpet }",
        "manipulated": 1,
        "rel_excluded": "instrument",
        "en_question": "give me a list of all trumpet players that were bandleaders",
        "question": "i\u0161vardykite visus trimitus kurie buvo orkestro dirigentai",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which us states are in the same timezone as utah\nAMR: (b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "which us states are in the same timezone as utah",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "qu\u00e9 estados de eeuu se encuentran en la misma zona horaria que utah\nAMR: (b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "qu\u00e9 estados de eeuu se encuentran en la misma zona horaria que utah",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "welche usstaaten liegen in der gleichen zeitzone wie utah\nAMR: (b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "welche usstaaten liegen in der gleichen zeitzone wie utah",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u043a\u0430\u043a\u0438\u0435 \u0448\u0442\u0430\u0442\u044b \u0441\u0448\u0430 \u0432 \u0442\u043e\u043c \u0436\u0435 \u0447\u0430\u0441\u043e\u0432\u043e\u043c \u043f\u043e\u044f\u0441\u0435 \u0447\u0442\u043e \u0438 \u044e\u0442\u0430\nAMR: (b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "\u043a\u0430\u043a\u0438\u0435 \u0448\u0442\u0430\u0442\u044b \u0441\u0448\u0430 \u0432 \u0442\u043e\u043c \u0436\u0435 \u0447\u0430\u0441\u043e\u0432\u043e\u043c \u043f\u043e\u044f\u0441\u0435 \u0447\u0442\u043e \u0438 \u044e\u0442\u0430",
        "language": "ru",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "quels \u00e9tats am\u00e9ricains sont dans le m\u00eame fuseau horaire que lutah \nAMR: (b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "quels \u00e9tats am\u00e9ricains sont dans le m\u00eame fuseau horaire que lutah ",
        "language": "fr",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "kurios jav valstijos yra toje pa\u010dioje laiko juostoje kaip juta\nAMR: (b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states are in the same timezone as utah",
        "question": "kurios jav valstijos yra toje pa\u010dioje laiko juostoje kaip juta",
        "language": "lt",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "which us states possess gold minerals\nAMR: (p / possess-01 :ARG0 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG1 (m / mineral :mod (g / gold)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "which us states possess gold minerals",
        "language": "en",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "en qu\u00e9 estados de los estados unidos de am\u00e9rica hay oro\nAMR: (p / possess-01 :ARG0 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG1 (m / mineral :mod (g / gold)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "en qu\u00e9 estados de los estados unidos de am\u00e9rica hay oro",
        "language": "es",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "in welchen usstaaten gibt es goldvorkommen\nAMR: (p / possess-01 :ARG0 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG1 (m / mineral :mod (g / gold)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "in welchen usstaaten gibt es goldvorkommen",
        "language": "de",
        "include_amr": true
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are a SPARQL-Predictor language model that generates a SPARQL query for a given question."
            },
            {
                "role": "system",
                "content": "This is important! All relations in the predicted SPARQL query must be in the allowed_relation_list: ['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "For verification, make a list of all the relations in the predicted SPARQL query. Verify that all relations are valid, reporting True or False for each relation."
            },
            {
                "role": "system",
                "content": "Return the prediction as a dictionary of the form: {'sparql_query': str, 'relations': list(), 'verification': list()}"
            },
            {
                "role": "user",
                "content": "where did abraham lincoln die\nAMR: (d / die-01 :ARG1 (p / person :name (n / name :op1 \"abraham\" :op2 \"lincoln\")) :location (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri. }', 'relations': ['deathPlace'], 'verification': [True] }"
            },
            {
                "role": "user",
                "content": "are jello shots calorie free\nAMR: (f / free-04 :ARG1 (s / shot :consist-of (f2 / food-dish :name (n / name :op1 \"jello\"))) :ARG2 (c / calorie) :polarity (a / amr-unknown))\nSPARQL dictionary:"
            },
            {
                "role": "assistant",
                "content": "{{'sparql_query': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Jello_shot dbo:approximateCalories ?calories . FILTER (?calories = 0) }', 'relations': ['approximateCalories'], 'verification': [False]}}"
            },
            {
                "role": "user",
                "content": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0448\u0442\u0430\u0442\u0430\u0445 \u0441\u0448\u0430 \u0435\u0441\u0442\u044c \u0437\u0430\u043b\u0435\u0436\u0438 \u0437\u043e\u043b\u043e\u0442\u043e\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043c\u0438\u043d\u0435\u0440\u0430\u043b\u043e\u0432\nAMR: (p / possess-01 :ARG0 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG1 (m / mineral :mod (g / gold)))\nSPARQL dictionary:"
            }
        ],
        "gold_sparql": "PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:mineral ?mineral FILTER regex(?mineral, \"gold\", \"i\") }",
        "manipulated": 0,
        "rel_excluded": "",
        "en_question": "which us states possess gold minerals",
        "question": "\u0432 \u043a\u0430\u043a\u0438\u0445 \u0448\u0442\u0430\u0442\u0430\u0445 \u0441\u0448\u0430 \u0435\u0441\u0442\u044c \u0437\u0430\u043b\u0435\u0436\u0438 \u0437\u043e\u043b\u043e\u0442\u043e\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043c\u0438\u043d\u0435\u0440\u0430\u043b\u043e\u0432",
        "language": "ru",
        "include_amr": true
    }
]